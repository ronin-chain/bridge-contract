{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "fallback",
      "stateMutability": "payable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADMIN_ROLE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "bulkRequestWithdrawalFor",
      "inputs": [
        {
          "name": "requests",
          "type": "tuple[]",
          "internalType": "struct Transfer.Request[]",
          "components": [
            {
              "name": "recipientAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "info",
              "type": "tuple",
              "internalType": "struct TokenInfo",
              "components": [
                {
                  "name": "erc",
                  "type": "uint8",
                  "internalType": "enum TokenStandard"
                },
                {
                  "name": "id",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "quantity",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        },
        {
          "name": "chainId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "bulkSubmitWithdrawalSignatures",
      "inputs": [
        {
          "name": "withdrawals",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "signatures",
          "type": "bytes[]",
          "internalType": "bytes[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "checkThreshold",
      "inputs": [
        {
          "name": "_voteWeight",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "depositFor",
      "inputs": [
        {
          "name": "_receipt",
          "type": "tuple",
          "internalType": "struct Transfer.Receipt",
          "components": [
            {
              "name": "id",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "kind",
              "type": "uint8",
              "internalType": "enum Transfer.Kind"
            },
            {
              "name": "mainchain",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "ronin",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "info",
              "type": "tuple",
              "internalType": "struct TokenInfo",
              "components": [
                {
                  "name": "erc",
                  "type": "uint8",
                  "internalType": "enum TokenStandard"
                },
                {
                  "name": "id",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "quantity",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "depositVote",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "status",
          "type": "uint8",
          "internalType": "enum VoteStatusConsumer.VoteStatus"
        },
        {
          "name": "finalHash",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "expiredAt",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "createdAt",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "depositVoted",
      "inputs": [
        {
          "name": "_chainId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_depositId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_voter",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "emergencyPauser",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMainchainToken",
      "inputs": [
        {
          "name": "_roninToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_chainId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "_token",
          "type": "tuple",
          "internalType": "struct MappedTokenConsumer.MappedToken",
          "components": [
            {
              "name": "erc",
              "type": "uint8",
              "internalType": "enum TokenStandard"
            },
            {
              "name": "tokenAddr",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleAdmin",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleMember",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleMemberCount",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getThreshold",
      "inputs": [],
      "outputs": [
        {
          "name": "num_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "denom_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTrustedThreshold",
      "inputs": [],
      "outputs": [
        {
          "name": "trustedNum_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "trustedDenom_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getWithdrawalSignatures",
      "inputs": [
        {
          "name": "withdrawalId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "operators",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "_signatures",
          "type": "bytes[]",
          "internalType": "bytes[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "grantRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "hasRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "_roleSetter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_numerator",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_denominator",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_trustedNumerator",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_trustedDenominator",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "_packedAddresses",
          "type": "address[][2]",
          "internalType": "address[][2]"
        },
        {
          "name": "_packedNumbers",
          "type": "uint256[][2]",
          "internalType": "uint256[][2]"
        },
        {
          "name": "_standards",
          "type": "uint8[]",
          "internalType": "enum TokenStandard[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "bridgeAdmin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "mainchainWithdrew",
      "inputs": [
        {
          "name": "_withdrawalId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "mainchainWithdrewVote",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "status",
          "type": "uint8",
          "internalType": "enum VoteStatusConsumer.VoteStatus"
        },
        {
          "name": "finalHash",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "expiredAt",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "createdAt",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "mainchainWithdrewVoted",
      "inputs": [
        {
          "name": "_withdrawalId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_voter",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "mapTokens",
      "inputs": [
        {
          "name": "_roninTokens",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "_mainchainTokens",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "_chainIds",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "_standards",
          "type": "uint8[]",
          "internalType": "enum TokenStandard[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "minimumThreshold",
      "inputs": [
        {
          "name": "mainchainToken",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "minimumVoteWeight",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "nonce",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "onERC1155BatchReceived",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "onERC1155Received",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "pause",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "paused",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "renounceRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestWithdrawalFor",
      "inputs": [
        {
          "name": "_request",
          "type": "tuple",
          "internalType": "struct Transfer.Request",
          "components": [
            {
              "name": "recipientAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "info",
              "type": "tuple",
              "internalType": "struct TokenInfo",
              "components": [
                {
                  "name": "erc",
                  "type": "uint8",
                  "internalType": "enum TokenStandard"
                },
                {
                  "name": "id",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "quantity",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        },
        {
          "name": "_chainId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestWithdrawalSignatures",
      "inputs": [
        {
          "name": "_withdrawalId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revokeRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setEmergencyPauser",
      "inputs": [
        {
          "name": "_addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMinimumThresholds",
      "inputs": [
        {
          "name": "_tokens",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "_thresholds",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setThreshold",
      "inputs": [
        {
          "name": "_numerator",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_denominator",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setTrustedThreshold",
      "inputs": [
        {
          "name": "_trustedNumerator",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_trustedDenominator",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "tryBulkAcknowledgeMainchainWithdrew",
      "inputs": [
        {
          "name": "_withdrawalIds",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "_executedReceipts",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "tryBulkDepositFor",
      "inputs": [
        {
          "name": "receipts",
          "type": "tuple[]",
          "internalType": "struct Transfer.Receipt[]",
          "components": [
            {
              "name": "id",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "kind",
              "type": "uint8",
              "internalType": "enum Transfer.Kind"
            },
            {
              "name": "mainchain",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "ronin",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "info",
              "type": "tuple",
              "internalType": "struct TokenInfo",
              "components": [
                {
                  "name": "erc",
                  "type": "uint8",
                  "internalType": "enum TokenStandard"
                },
                {
                  "name": "id",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "quantity",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "_executedReceipts",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "unpause",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "withdrawal",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "id",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "kind",
          "type": "uint8",
          "internalType": "enum Transfer.Kind"
        },
        {
          "name": "mainchain",
          "type": "tuple",
          "internalType": "struct TokenOwner",
          "components": [
            {
              "name": "addr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "chainId",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "ronin",
          "type": "tuple",
          "internalType": "struct TokenOwner",
          "components": [
            {
              "name": "addr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "chainId",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "info",
          "type": "tuple",
          "internalType": "struct TokenInfo",
          "components": [
            {
              "name": "erc",
              "type": "uint8",
              "internalType": "enum TokenStandard"
            },
            {
              "name": "id",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "quantity",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdrawalCount",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdrawalStatVote",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "status",
          "type": "uint8",
          "internalType": "enum VoteStatusConsumer.VoteStatus"
        },
        {
          "name": "finalHash",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "expiredAt",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "createdAt",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "DepositVoted",
      "inputs": [
        {
          "name": "bridgeOperator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "id",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "chainId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "receiptHash",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Deposited",
      "inputs": [
        {
          "name": "receiptHash",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        },
        {
          "name": "receipt",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "components": [
            {
              "name": "id",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "kind",
              "type": "uint8",
              "internalType": "enum Transfer.Kind"
            },
            {
              "name": "mainchain",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "ronin",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "info",
              "type": "tuple",
              "internalType": "struct TokenInfo",
              "components": [
                {
                  "name": "erc",
                  "type": "uint8",
                  "internalType": "enum TokenStandard"
                },
                {
                  "name": "id",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "quantity",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MainchainWithdrew",
      "inputs": [
        {
          "name": "receiptHash",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        },
        {
          "name": "receipt",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "components": [
            {
              "name": "id",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "kind",
              "type": "uint8",
              "internalType": "enum Transfer.Kind"
            },
            {
              "name": "mainchain",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "ronin",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "info",
              "type": "tuple",
              "internalType": "struct TokenInfo",
              "components": [
                {
                  "name": "erc",
                  "type": "uint8",
                  "internalType": "enum TokenStandard"
                },
                {
                  "name": "id",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "quantity",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MinimumThresholdsUpdated",
      "inputs": [
        {
          "name": "tokens",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "threshold",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Paused",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleAdminChanged",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "previousAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "newAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleGranted",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleRevoked",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ThresholdUpdated",
      "inputs": [
        {
          "name": "nonce",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "numerator",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "denominator",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "previousNumerator",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "previousDenominator",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokenMapped",
      "inputs": [
        {
          "name": "roninTokens",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "mainchainTokens",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "chainIds",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        },
        {
          "name": "standards",
          "type": "uint8[]",
          "indexed": false,
          "internalType": "enum TokenStandard[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TrustedThresholdUpdated",
      "inputs": [
        {
          "name": "nonce",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "numerator",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "denominator",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "previousNumerator",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "previousDenominator",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Unpaused",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "WithdrawalRequested",
      "inputs": [
        {
          "name": "receiptHash",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        },
        {
          "name": "",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "components": [
            {
              "name": "id",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "kind",
              "type": "uint8",
              "internalType": "enum Transfer.Kind"
            },
            {
              "name": "mainchain",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "ronin",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "info",
              "type": "tuple",
              "internalType": "struct TokenInfo",
              "components": [
                {
                  "name": "erc",
                  "type": "uint8",
                  "internalType": "enum TokenStandard"
                },
                {
                  "name": "id",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "quantity",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "WithdrawalSignaturesRequested",
      "inputs": [
        {
          "name": "receiptHash",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        },
        {
          "name": "",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "components": [
            {
              "name": "id",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "kind",
              "type": "uint8",
              "internalType": "enum Transfer.Kind"
            },
            {
              "name": "mainchain",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "ronin",
              "type": "tuple",
              "internalType": "struct TokenOwner",
              "components": [
                {
                  "name": "addr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "tokenAddr",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "chainId",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "info",
              "type": "tuple",
              "internalType": "struct TokenInfo",
              "components": [
                {
                  "name": "erc",
                  "type": "uint8",
                  "internalType": "enum TokenStandard"
                },
                {
                  "name": "id",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "quantity",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyVoted",
      "inputs": [
        {
          "name": "voter",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrERC1155MintingFailed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrERC20MintingFailed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrERC721MintingFailed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrEmptyArray",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidChainId",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "actual",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expected",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidInfo",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidReceipt",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidReceiptKind",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidRequest",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidThreshold",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidTokenStandard",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidTrustedThreshold",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrLengthMismatch",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrQueryForTooSmallQuantity",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrTokenCouldNotTransfer",
      "inputs": [
        {
          "name": "tokenInfo",
          "type": "tuple",
          "internalType": "struct TokenInfo",
          "components": [
            {
              "name": "erc",
              "type": "uint8",
              "internalType": "enum TokenStandard"
            },
            {
              "name": "id",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "quantity",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrTokenCouldNotTransferFrom",
      "inputs": [
        {
          "name": "tokenInfo",
          "type": "tuple",
          "internalType": "struct TokenInfo",
          "components": [
            {
              "name": "erc",
              "type": "uint8",
              "internalType": "enum TokenStandard"
            },
            {
              "name": "id",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "quantity",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnsupportedStandard",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnsupportedToken",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrWithdrawalsMigrated",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrWithdrawnOnMainchainAlready",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    }
  ],
  "address": "0xdA48f437Eb827CB997a7D09487D53bE72F2C57a8",
  "args": "0x",
  "ast": "",
  "blockNumber": 26515571,
  "bytecode": "0x60806040523480156200001157600080fd5b506000805460ff19169055620000266200002c565b620000ee565b603754610100900460ff1615620000995760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60375460ff9081161015620000ec576037805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6150b880620000fe6000396000f3fe6080604052600436106102975760003560e01c80638456cb591161015a578063ca15c873116100c1578063ecc836491161007a578063ecc836491461089f578063f0ce418e146108cc578063f23a6e6114610912578063f668214a1461093e578063fa3896591461095e578063fc6574bc1461097e576102a6565b8063ca15c873146107e7578063d547741f14610807578063dafae40814610827578063dbd2ef6c14610847578063de981f1b14610867578063e75235b814610887576102a6565b8063affed0e011610113578063affed0e0146106e5578063b9afa177146106fb578063b9c362091461071b578063bc197c811461073b578063bc7f038614610774578063c28f7894146107a1576102a6565b80638456cb591461063b578063865e6fd3146106505780639010d07c1461067057806391d14854146106905780639584a592146106b0578063a217fddf146106d0576102a6565b80633f4ba83a116101fe5780635d6a9a90116101b75780635d6a9a901461057257806364363f781461059f57806371706cbe146105bf57806375535f86146105d55780637de5dedd146105f5578063835fc6ca1461060a576102a6565b80633f4ba83a1461048f57806347b56b2c146104a45780634d92c4f0146104c45780635a7dd06a146105255780635c975abb146105455780635cd8a76b1461055d576102a6565b8063248a9ca311610250578063248a9ca3146103b15780632f2ff15d146103ef5780633101cfcb1461040f57806336568abe1461042f5780633e4574ec1461044f5780633e70838b1461046f576102a6565b806301ffc9a7146102ae578063065b3adf146102e35780630b1ff17f1461031b578063109679ef1461033b57806317892f961461035b57806317fa2ea114610384576102a6565b366102a6576102a46109d0565b005b6102a46109d0565b3480156102ba57600080fd5b506102ce6102c9366004613c2d565b6109e9565b60405190151581526020015b60405180910390f35b3480156102ef57600080fd5b50600554610303906001600160a01b031681565b6040516001600160a01b0390911681526020016102da565b34801561032757600080fd5b506102a4610336366004613c57565b610a09565b34801561034757600080fd5b506102a4610356366004613c88565b610a20565b34801561036757600080fd5b506078546079545b604080519283526020830191909152016102da565b34801561039057600080fd5b506103a461039f366004613ce5565b610a53565b6040516102da9190613d26565b3480156103bd57600080fd5b506103e16103cc366004613d60565b6000908152606b602052604090206001015490565b6040519081526020016102da565b3480156103fb57600080fd5b506102a461040a366004613d99565b610d90565b34801561041b57600080fd5b506102a461042a366004613dc9565b610dba565b34801561043b57600080fd5b506102a461044a366004613d99565b610e66565b34801561045b57600080fd5b506102ce61046a366004613d99565b610ee0565b34801561047b57600080fd5b506102a461048a366004613dc9565b610f10565b34801561049b57600080fd5b506102a4610f3a565b3480156104b057600080fd5b506102a46104bf366004613d60565b610f4c565b3480156104d057600080fd5b506105156104df366004613de6565b606f602090815260009283526040808420909152908252902080546001820154600383015460049093015460ff90921692909184565b6040516102da9493929190613e1e565b34801561053157600080fd5b506102a4610540366004613e4e565b611117565b34801561055157600080fd5b5060005460ff166102ce565b34801561056957600080fd5b506102a461117e565b34801561057e57600080fd5b5061059261058d366004613ec8565b611280565b6040516102da9190613f04565b3480156105ab57600080fd5b506102a46105ba366004613f30565b611324565b3480156105cb57600080fd5b506103e1606e5481565b3480156105e157600080fd5b5061036f6105f0366004613de6565b611360565b34801561060157600080fd5b506103e1611381565b34801561061657600080fd5b5061062a610625366004613d60565b611398565b6040516102da959493929190613ff8565b34801561064757600080fd5b506102a461146a565b34801561065c57600080fd5b506102a461066b36600461404e565b61147a565b34801561067c57600080fd5b5061030361068b366004613de6565b611495565b34801561069c57600080fd5b506102ce6106ab366004613d99565b6114ad565b3480156106bc57600080fd5b506102a46106cb36600461408b565b6114d8565b3480156106dc57600080fd5b506103e1600081565b3480156106f157600080fd5b506103e160045481565b34801561070757600080fd5b506103a4610716366004614184565b611625565b34801561072757600080fd5b506102a4610736366004613de6565b611743565b34801561074757600080fd5b50610767610756366004614368565b63bc197c8160e01b95945050505050565b6040516102da9190614415565b34801561078057600080fd5b506103e161078f366004613dc9565b60386020526000908152604090205481565b3480156107ad57600080fd5b506105156107bc366004613d60565b607660205260009081526040902080546001820154600383015460049093015460ff90921692909184565b3480156107f357600080fd5b506103e1610802366004613d60565b611755565b34801561081357600080fd5b506102a4610822366004613d99565b61176c565b34801561083357600080fd5b506102ce610842366004613d60565b611791565b34801561085357600080fd5b506102a461086236600461442a565b6117bd565b34801561087357600080fd5b506103036108823660046144ed565b61180f565b34801561089357600080fd5b5060015460025461036f565b3480156108ab57600080fd5b506108bf6108ba366004614508565b61188a565b6040516102da91906145a3565b3480156108d857600080fd5b506105156108e7366004613d60565b607060205260009081526040902080546001820154600383015460049093015460ff90921692909184565b34801561091e57600080fd5b5061076761092d366004614607565b63f23a6e6160e01b95945050505050565b34801561094a57600080fd5b506102ce610959366004613d60565b6119f1565b34801561096a57600080fd5b506102a4610979366004613f30565b611a1f565b34801561098a57600080fd5b506102ce61099936600461466f565b6000928352606f602090815260408085209385529281528284206001600160a01b0392909216845260029091019052902054151590565b60405163129c2ce160e31b815260040160405180910390fd5b60006109f482611c1a565b80610a035750610a0382611c3f565b92915050565b610a11611c64565b610a1c823383611caa565b5050565b610a28611c64565b610a30611d79565b610a50610a4236839003830183614746565b33610a4b611381565b611e1a565b50565b6060610a5d611d79565b336000610a68611381565b9050600084806001600160401b03811115610a8557610a856141f9565b604051908082528060200260200182016040528015610aae578160200160208202803683370190505b5094506000610abd600361180f565b905060005b82811015610d8457888882818110610adc57610adc6147d7565b905060200201359350816001600160a01b031663c7c4fea9600286896040518463ffffffff1660e01b8152600401610b16939291906147ed565b600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b50505050610b51846119f1565b15610b7b576001878281518110610b6a57610b6a6147d7565b911515602092830291909101909101525b600084815260706020908152604080832060718352818420825160a081019093528054835260018082015492959491929184019160ff1690811115610bc257610bc2613e08565b6001811115610bd357610bd3613e08565b815260408051606080820183526002858101546001600160a01b039081168452600387015481166020858101919091526004880154858701528087019490945284518084018652600588015482168152600688015490911693810193909352600786015483850152838501929092528251808201909352600885018054919094019391839160ff1690811115610c6b57610c6b613e08565b6002811115610c7c57610c7c613e08565b81526001820154602082015260029091015460409091015290525090506000610ca482612121565b90506000610cb4848b8b856121eb565b90506001816004811115610cca57610cca613e08565b03610d7557835460ff19166002908117855560405163114fc47560e11b81526001600160a01b0388169163229f88ea91610d0991908c90600401614817565b600060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b505050507f62520d049932cdee872e9b3c59c0f6073637147e5e9bc8b050b062430eaf5c9f8284604051610d6c92919061482e565b60405180910390a15b50505050806001019050610ac2565b50505050505092915050565b6000828152606b6020526040902060010154610dab8161221e565b610db58383612228565b505050565b603754600390610100900460ff16158015610ddc575060375460ff8083169116105b610e015760405162461bcd60e51b8152600401610df89061488d565b60405180910390fd5b6037805461ffff191660ff831617610100179055610e20600b8361224a565b6037805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6001600160a01b0381163314610ed65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610df8565b610a1c82826122ee565b60008281526070602090815260408083206001600160a01b038516845260020190915281205415155b9392505050565b610f18612310565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610f4261236a565b610f4a6123d9565b565b610f54611c64565b610f5d816119f1565b15610f7b576040516327ddf84960e11b815260040160405180910390fd5b6000818152607160209081526040808320815160a0810190925280548252600180820154929391929184019160ff1690811115610fba57610fba613e08565b6001811115610fcb57610fcb613e08565b815260408051606080820183526002858101546001600160a01b039081168452600387015481166020858101919091526004880154858701528087019490945284518084018652600588015482168152600688015490911693810193909352600786015483850152838501929092528251808201909352600885018054919094019391839160ff169081111561106357611063613e08565b600281111561107457611074613e08565b8152600182015460208201526002909101546040918201529152606083015101519192505046146110de576060810151604090810151905163092048d160e11b81526001600160e01b03196000351660048201526024810191909152466044820152606401610df8565b7f04e8cbd836dea43a2dc7eb19de345cca3a8e6978a2ef5225d924775500f67c7c61110882612121565b82604051610e5a92919061482e565b61111f611c64565b816000819003611142576040516316ee9d3b60e11b815260040160405180910390fd5b60005b818110156111775761116f858583818110611162576111626147d7565b905060a002013385611caa565b600101611145565b5050505050565b603754600290610100900460ff161580156111a0575060375460ff8083169116105b6111bc5760405162461bcd60e51b8152600401610df89061488d565b6037805461ffff191660ff8316176101001790556074546111e8906008906001600160a01b031661224a565b607554611200906003906001600160a01b031661224a565b60775461121890600a906001600160a01b031661224a565b607480546001600160a01b031990811690915560758054821690556077805490911690556037805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b604080518082018252600080825260208083018290526001600160a01b038616825260738152838220858352905282902082518084019093528054919291829060ff1660028111156112d4576112d4613e08565b60028111156112e5576112e5613e08565b815290546001600160a01b0361010090910481166020928301529082015191925016610a0357604051631b79f53b60e21b815260040160405180910390fd5b61132c612310565b600083900361134e576040516316ee9d3b60e11b815260040160405180910390fd5b61135a8484848461242b565b50505050565b60008061136b612310565b611375848461250e565b915091505b9250929050565b600061139361138e612598565b612605565b905090565b607160209081526000918252604091829020805460018201548451606080820187526002808601546001600160a01b03908116845260038701548116848901526004870154848a015288518084018a526005880154821681526006880154909116978101979097526007860154878901528751918201909752600885018054949760ff94851697939693959394929391928492169081111561143c5761143c613e08565b600281111561144d5761144d613e08565b815260200160018201548152602001600282015481525050905085565b61147261236a565b610f4a61263b565b611482612310565b61148b81612678565b610a1c828261224a565b6000828152606c60205260408120610f0990836126ae565b6000918252606b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b603754610100900460ff16158080156114f85750603754600160ff909116105b806115125750303b158015611512575060375460ff166001145b61152e5760405162461bcd60e51b8152600401610df89061488d565b6037805460ff191660011790558015611551576037805461ff0019166101001790555b61155c60008d6126ba565b6115668b8b6126c4565b611570898961250e565b506000905061157f86806148db565b905011156115d1576115b261159486806148db565b6115a160208901896148db565b6115ab89806148db565b8989612754565b6115d16115bf86806148db565b6115cc60208801886148db565b61242b565b8015611617576037805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b606061162f611c64565b611637611d79565b81806001600160401b03811115611650576116506141f9565b604051908082528060200260200182016040528015611679578160200160208202803683370190505b5091506000611686611381565b9050611690613bc0565b60005b83811015611739578686828181106116ad576116ad6147d7565b905061016002018036038101906116c49190614746565b915060026040808401518101516000908152606f6020908152828220865183529052205460ff1660048111156116fc576116fc613e08565b03611726576001858281518110611715576117156147d7565b911515602092830291909101909101525b611731823385611e1a565b600101611693565b5050505092915050565b61174b612310565b610a1c82826126c4565b6000818152606c60205260408120610a0390612970565b6000828152606b60205260409020600101546117878161221e565b610db583836122ee565b600061179b612598565b6001546117a8919061493a565b6002546117b5908461493a565b101592915050565b6117c5612310565b60008790036117f5576000356001600160e01b0319166040516306b5667560e21b8152600401610df89190614415565b6118058888888888888888612754565b5050505050505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f81111561184657611846613e08565b60ff1681526020810191909152604001600020546001600160a01b0316905080611885578160405163409140df60e11b8152600401610df89190614951565b919050565b6060816001600160401b038111156118a4576118a46141f9565b6040519080825280602002602001820160405280156118d757816020015b60608152602001906001900390816118c25790505b50905060005b828110156119e957600085815260726020526040812090858584818110611906576119066147d7565b905060200201602081019061191b9190613dc9565b6001600160a01b03166001600160a01b0316815260200190815260200160002080546119469061496b565b80601f01602080910402602001604051908101604052809291908181526020018280546119729061496b565b80156119bf5780601f10611994576101008083540402835291602001916119bf565b820191906000526020600020905b8154815290600101906020018083116119a257829003601f168201915b50505050508282815181106119d6576119d66147d7565b60209081029190910101526001016118dd565b509392505050565b6000600260008381526070602052604090205460ff166004811115611a1857611a18613e08565b1492915050565b611a27611c64565b611a2f611d79565b33838015801590611a3f57508083145b611a6a576000356001600160e01b0319166040516306b5667560e21b8152600401610df89190614415565b6000611a74611381565b9050600080611a83600361180f565b905060005b84811015611c0e57898982818110611aa257611aa26147d7565b905060200201359250878782818110611abd57611abd6147d7565b9050602002810190611acf919061499f565b60008581526072602090815260408083206001600160a01b038c168452909152902091611afd919083614a35565b5060405163c7c4fea960e01b81526001600160a01b0383169063c7c4fea990611b2f9060019087908b906004016147ed565b600060405180830381600087803b158015611b4957600080fd5b505af1158015611b5d573d6000803e3d6000fd5b50505060008481526076602052604081209150611b7c828988886121eb565b90506001816004811115611b9257611b92613e08565b03611c0457815460ff1916600217825560405163114fc47560e11b81526001600160a01b0385169063229f88ea90611bd1906001908990600401614817565b600060405180830381600087803b158015611beb57600080fd5b505af1158015611bff573d6000803e3d6000fd5b505050505b5050600101611a88565b50505050505050505050565b60006001600160e01b03198216635a05180f60e01b1480610a035750610a038261297a565b60006001600160e01b03198216630271189760e51b1480610a035750610a0382611c1a565b60005460ff1615610f4a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610df8565b611cc4611cbf36859003850160408601614af4565b6129af565b611ccd836129f3565b6000611ce8611ce26040860160208701613dc9565b83611280565b80519091506002811115611cfe57611cfe613e08565b611d0e6060860160408701614b10565b6002811115611d1f57611d1f613e08565b14611d3c5760405162035e2b60ea1b815260040160405180910390fd5b611d6983611d506040870160208801613dc9565b611d6236889003880160408901614af4565b9190612a71565b6111778483858460200151612bfc565b611d83600b61180f565b604051635a02d57960e11b81523360048201526001600160a01b03919091169063b405aaf290602401602060405180830381865afa158015611dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ded9190614b2b565b610f4a576000356001600160e01b0319166006604051620f948f60ea1b8152600401610df8929190614b4d565b82516080840151611e2a906129af565b600084602001516001811115611e4257611e42613e08565b14611e605760405163182f3d8760e11b815260040160405180910390fd5b4684606001516040015114611eae576060840151604090810151905163092048d160e11b81526001600160e01b03196000351660048201526024810191909152466044820152606401610df8565b6000611eca856060015160200151866040015160400151611280565b6080860151519091506002811115611ee457611ee4613e08565b81516002811115611ef757611ef7613e08565b148015611f2157508460400151602001516001600160a01b031681602001516001600160a01b0316145b611f3e5760405163f4b8742f60e01b815260040160405180910390fd5b6040808601518101516000908152606f6020908152828220858352905290812090611f6887612121565b90506000611f78838888856121eb565b905087604001516040015185886001600160a01b03167f48c4262ed68beb92fe5d7d48d70772e49cd50c317937dea60a99f15f794b645985604051611fbf91815260200190565b60405180910390a46000611fd3600361180f565b90506001826004811115611fe957611fe9613e08565b036120b357835460ff191660021784556060890151805160209091015160808b01516120189290916000612d8e565b885160405163114fc47560e11b81526001600160a01b0383169163229f88ea9161204791600091600401614817565b600060405180830381600087803b15801561206157600080fd5b505af1158015612075573d6000803e3d6000fd5b505050507f8d20d8121a34dded9035ff5b43e901c142824f7a22126392992c353c37890524838a6040516120aa92919061482e565b60405180910390a15b885160405163c7c4fea960e01b81526001600160a01b0383169163c7c4fea9916120e4916000918d906004016147ed565b600060405180830381600087803b1580156120fe57600080fd5b505af1158015612112573d6000803e3d6000fd5b50505050505050505050505050565b6000806121318360400151612fa7565b905060006121428460600151612fa7565b905060006121968560800151604080517f1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d815282516020808301919091528301518183015291015160608201526080902090565b604080517fb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea815287516020808301919091529097015190870152606086019390935250608084015260a08301525060c0902090565b60006121f8858584612fef565b600061220486846130a5565b9050612212868583866131a9565b9150505b949350505050565b610a5081336131f5565b6122328282613259565b6000828152606c60205260409020610db590826132df565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561228057612280613e08565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156122c1576122c1613e08565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6122f882826132f4565b6000828152606c60205260409020610db5908261335b565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610f4a576000356001600160e01b0319166001604051620f948f60ea1b8152600401610df8929190614b4d565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314806123ac57506005546001600160a01b031633145b610f4a576000356001600160e01b0319166001604051620f948f60ea1b8152600401610df8929190614b4d565b6123e1613370565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b828114612459576000356001600160e01b0319166040516306b5667560e21b8152600401610df89190614415565b60005b838110156124ca57828282818110612476576124766147d7565b9050602002013560386000878785818110612493576124936147d7565b90506020020160208101906124a89190613dc9565b6001600160a01b0316815260208101919091526040016000205560010161245c565b507f6f52f53a938df83439fa4c6055c7df0a6906d621aa6dfa4708187037fdfc41da848484846040516125009493929190614bf6565b60405180910390a150505050565b600080828411156125325760405163964a4d2760e01b815260040160405180910390fd5b505060018054600254607885905560798490556004805493840190556040805183815260208101839052929391928592879290917feac82d4d949d2d4f77f96aa68ab6b1bb750da73f14e55d41a1b93f387471ecba910160405180910390a49250929050565b60006125a4600b61180f565b6001600160a01b03166306aba0e16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113939190614c28565b600060025460016002548460015461261d919061493a565b6126279190614c41565b6126319190614c54565b610a039190614c67565b612643611c64565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861240e3390565b806001600160a01b03163b600003610a5057604051630bfc64a360e21b81526001600160a01b0382166004820152602401610df8565b6000610f0983836133b9565b610a1c8282612228565b808211156126f3576000356001600160e01b0319166040516387f6f09560e01b8152600401610df89190614415565b6001805460028054858455908490556004805493840190556040805183815260208101839052929391928592879290917f976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f8910160405180910390a450505050565b868514801561276257508683145b61278d576000356001600160e01b0319166040516306b5667560e21b8152600401610df89190614415565b60005b87811015612920578686828181106127aa576127aa6147d7565b90506020020160208101906127bf9190613dc9565b607360008b8b858181106127d5576127d56147d7565b90506020020160208101906127ea9190613dc9565b6001600160a01b03166001600160a01b03168152602001908152602001600020600087878581811061281e5761281e6147d7565b90506020020135815260200190815260200160002060000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555082828281811061286c5761286c6147d7565b90506020020160208101906128819190614b10565b607360008b8b85818110612897576128976147d7565b90506020020160208101906128ac9190613dc9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008787858181106128e0576128e06147d7565b60209081029290920135835250810191909152604001600020805460ff1916600183600281111561291357612913613e08565b0217905550600101612790565b507f2544bff60c6d5b84946e06804af9f84e150bbee85238dbdee79efca4e0adf401888888888888888860405161295e989796959493929190614c89565b60405180910390a15050505050505050565b6000610a03825490565b60006001600160e01b03198216637965db0b60e01b1480610a0357506301ffc9a760e01b6001600160e01b0319831614610a03565b6129b8816133e3565b806129c757506129c78161341a565b806129d657506129d681613442565b610a505760405163034992a760e51b815260040160405180910390fd5b6000612a056060830160408401614b10565b6002811115612a1657612a16613e08565b148015612a53575060386000612a326040840160208501613dc9565b6001600160a01b031681526020810191909152604001600020546080820135105b15610a5057604051636eff4a8560e11b815260040160405180910390fd5b600060608185516002811115612a8957612a89613e08565b03612b645760408581015181516001600160a01b03878116602483015230604483015260648083019390935283518083039093018352608490910183526020820180516001600160e01b03166323b872dd60e01b179052915191851691612af09190614d18565b6000604051808303816000865af19150503d8060008114612b2d576040519150601f19603f3d011682016040523d82523d6000602084013e612b32565b606091505b509092509050818015612b5d575080511580612b5d575080806020019051810190612b5d9190614b2b565b9150612bd6565b600185516002811115612b7957612b79613e08565b03612b8e57612b5d838530886020015161346b565b600285516002811115612ba357612ba3613e08565b03612bbd57612b5d83853088602001518960400151613519565b6040516361e411a760e11b815260040160405180910390fd5b816111775784843085604051639d2e4c6760e01b8152600401610df89493929190614d34565b606e805460009182612c0d83614d6a565b9091555090506000612c3484838588612c2b368c90038c018c614d83565b939291906135cd565b60008381526071602090815260409091208251815590820151600180830180549495508594909160ff19909116908381811115612c7357612c73613e08565b02179055506040828101518051600280850180546001600160a01b039384166001600160a01b03199182161790915560208085015160038801805491861691841691909117905593850151600487015560608701518051600588018054918616918416919091179055938401516006870180549190941691161790915591015160078301556080830151805160088401805492939092839160ff19909116906001908490811115612d2657612d26613e08565b0217905550602082015181600101556040820151816002015550509050507ff313c253a5be72c29d0deb2c8768a9543744ac03d6b3cafd50cc976f1c2632fc612d6e82612121565b82604051612d7d92919061482e565b60405180910390a150949350505050565b806001600160a01b0316826001600160a01b031603612e3b5760408085015190516001600160a01b0385169180156108fc02916000818181858888f19350505050612e3657806001600160a01b031663d0e30db085604001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612e1257600080fd5b505af1158015612e26573d6000803e3d6000fd5b5050505050612e36848484613639565b61135a565b600084516002811115612e5057612e50613e08565b03612f16576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec09190614c28565b90508460400151811015612f0557612ee88330838860400151612ee39190614c54565b6136b8565b612f0557604051632f739fff60e11b815260040160405180910390fd5b612f10858585613639565b5061135a565b600184516002811115612f2b57612f2b613e08565b03612f5c57612f3f8284866020015161375d565b612e365760405163c8e3a09f60e01b815260040160405180910390fd5b600284516002811115612f7157612f71613e08565b03612bbd57612f8a828486602001518760400151613784565b612e36576040516334b471a760e21b815260040160405180910390fd5b604080517f353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e8764815282516020808301919091528301518183015291015160608201526080902090565b60008360030154118015613007575042836003015411155b1561301857825460ff191660041783555b6001600160a01b03821660009081526002840160205260409020541561305c5760405163025fd59560e41b81526001600160a01b0383166004820152602401610df8565b6001600160a01b039091166000818152600284016020908152604082209390935560059093018054600181018255908452919092200180546001600160a01b0319169091179055565b60008060006130b4600b61180f565b6001600160a01b031663c441c4a86040518163ffffffff1660e01b8152600401600060405180830381865afa1580156130f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131199190810190614e3e565b81519194509250905060005b818110156117395785876002016000868481518110613146576131466147d7565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054036131a157828181518110613186576131866147d7565b60200260200101516bffffffffffffffffffffffff16850194505b600101613125565b60008383101580156131d057506000855460ff1660048111156131ce576131ce613e08565b145b156131e857845460ff19166001908117865585018290555b5050915460ff1692915050565b6131ff82826114ad565b610a1c57613217816001600160a01b031660146137ad565b6132228360206137ad565b604051602001613233929190614f36565b60408051601f198184030181529082905262461bcd60e51b8252610df891600401614fab565b61326382826114ad565b610a1c576000828152606b602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561329b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f09836001600160a01b038416613948565b6132fe82826114ad565b15610a1c576000828152606b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f09836001600160a01b038416613997565b60005460ff16610f4a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610df8565b60008260000182815481106133d0576133d06147d7565b9060005260206000200154905092915050565b600080825160028111156133f9576133f9613e08565b14801561340a575060008260400151115b8015610a03575050602001511590565b600060018251600281111561343157613431613e08565b148015610a03575050604001511590565b600060028251600281111561345957613459613e08565b148015610a0357505060400151151590565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928716916134cb91614d18565b6000604051808303816000865af19150503d8060008114613508576040519150601f19603f3d011682016040523d82523d6000602084013e61350d565b606091505b50909695505050505050565b604080516000808252602082019092526001600160a01b0387169061354990879087908790879060448101614fbe565b60408051601f198184030181529181526020820180516001600160e01b0316637921219560e11b1790525161357e9190614d18565b6000604051808303816000865af19150503d80600081146135bb576040519150601f19603f3d011682016040523d82523d6000602084013e6135c0565b606091505b5090979650505050505050565b6135d5613bc0565b92835260016020808501919091526060840180516001600160a01b0396871690528682015181519087169083015251466040918201528651818601805191881690915280519490961693909101929092529251810192909252910151608082015290565b6000808451600281111561364f5761364f613e08565b0361366a5761366382848660400151613a8a565b9050613694565b60018451600281111561367f5761367f613e08565b03612bbd57613663823085876020015161346b565b8061135a578383836040516341bd7d9160e11b8152600401610df893929190614ff8565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03166340c10f1960e01b179052915160009286169161371091614d18565b6000604051808303816000865af19150503d806000811461374d576040519150601f19603f3d011682016040523d82523d6000602084013e613752565b606091505b509095945050505050565b600061376b8430858561346b565b905080610f095761377d8484846136b8565b9050610f09565b60006137938530868686613519565b905080612216576137a685858585613b5d565b9050612216565b606060006137bc83600261493a565b6137c7906002614c41565b6001600160401b038111156137de576137de6141f9565b6040519080825280601f01601f191660200182016040528015613808576020820181803683370190505b509050600360fc1b81600081518110613823576138236147d7565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613852576138526147d7565b60200101906001600160f81b031916908160001a905350600061387684600261493a565b613881906001614c41565b90505b60018111156138f9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106138b5576138b56147d7565b1a60f81b8282815181106138cb576138cb6147d7565b60200101906001600160f81b031916908160001a90535060049490941c936138f281615028565b9050613884565b508315610f095760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610df8565b600081815260018301602052604081205461398f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a03565b506000610a03565b60008181526001830160205260408120548015613a805760006139bb600183614c54565b85549091506000906139cf90600190614c54565b9050818114613a345760008660000182815481106139ef576139ef6147d7565b9060005260206000200154905080876000018481548110613a1257613a126147d7565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613a4557613a4561503f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a03565b6000915050610a03565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009260609290871691613ae79190614d18565b6000604051808303816000865af19150503d8060008114613b24576040519150601f19603f3d011682016040523d82523d6000602084013e613b29565b606091505b509092509050818015613b54575080511580613b54575080806020019051810190613b549190614b2b565b95945050505050565b604080516000808252602082019092526001600160a01b03861690613b8b9086908690869060448101615055565b60408051601f198184030181529181526020820180516001600160e01b031663731133e960e01b179052516134cb9190614d18565b6040805160a08101825260008082526020808301829052835160608082018652838252818301849052818601849052848601919091528451808201865283815280830184905280860184905281850152845190810185528281529081018290529283015290608082015290565b600060208284031215613c3f57600080fd5b81356001600160e01b031981168114610f0957600080fd5b60008082840360c0811215613c6b57600080fd5b60a0811215613c7957600080fd5b50919360a08501359350915050565b60006101608284031215613c9b57600080fd5b50919050565b60008083601f840112613cb357600080fd5b5081356001600160401b03811115613cca57600080fd5b6020830191508360208260051b850101111561137a57600080fd5b60008060208385031215613cf857600080fd5b82356001600160401b03811115613d0e57600080fd5b613d1a85828601613ca1565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561350d578351151583529284019291840191600101613d42565b600060208284031215613d7257600080fd5b5035919050565b6001600160a01b0381168114610a5057600080fd5b803561188581613d79565b60008060408385031215613dac57600080fd5b823591506020830135613dbe81613d79565b809150509250929050565b600060208284031215613ddb57600080fd5b8135610f0981613d79565b60008060408385031215613df957600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b6080810160058610613e3257613e32613e08565b9481526020810193909352604083019190915260609091015290565b600080600060408486031215613e6357600080fd5b83356001600160401b0380821115613e7a57600080fd5b818601915086601f830112613e8e57600080fd5b813581811115613e9d57600080fd5b87602060a083028501011115613eb257600080fd5b6020928301989097509590910135949350505050565b60008060408385031215613edb57600080fd5b8235613ee681613d79565b946020939093013593505050565b60038110610a5057610a50613e08565b81516040820190613f1481613ef4565b82526020928301516001600160a01b0316929091019190915290565b60008060008060408587031215613f4657600080fd5b84356001600160401b0380821115613f5d57600080fd5b613f6988838901613ca1565b90965094506020870135915080821115613f8257600080fd5b50613f8f87828801613ca1565b95989497509550505050565b60028110613fab57613fab613e08565b9052565b80516001600160a01b03908116835260208083015190911690830152604090810151910152565b8051613fe181613ef4565b825260208181015190830152604090810151910152565b858152610160810161400d6020830187613f9b565b61401a6040830186613faf565b61402760a0830185613faf565b614035610100830184613fd6565b9695505050505050565b80356010811061188557600080fd5b6000806040838503121561406157600080fd5b61406a8361403f565b91506020830135613dbe81613d79565b8060408101831015610a0357600080fd5b60008060008060008060008060008060006101208c8e0312156140ad57600080fd5b6140b68c613d8e565b9a5060208c0135995060408c0135985060608c0135975060808c013596506001600160401b038060a08e013511156140ed57600080fd5b6140fd8e60a08f01358f01613ca1565b909750955060c08d013581101561411357600080fd5b6141238e60c08f01358f0161407a565b94508060e08e0135111561413657600080fd5b6141468e60e08f01358f0161407a565b9350806101008e0135111561415a57600080fd5b5061416c8d6101008e01358e01613ca1565b81935080925050509295989b509295989b9093969950565b6000806020838503121561419757600080fd5b82356001600160401b03808211156141ae57600080fd5b818501915085601f8301126141c257600080fd5b8135818111156141d157600080fd5b866020610160830285010111156141e757600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715614231576142316141f9565b60405290565b604051601f8201601f191681016001600160401b038111828210171561425f5761425f6141f9565b604052919050565b60006001600160401b03821115614280576142806141f9565b5060051b60200190565b600082601f83011261429b57600080fd5b813560206142b06142ab83614267565b614237565b8083825260208201915060208460051b8701019350868411156142d257600080fd5b602086015b848110156142ee57803583529183019183016142d7565b509695505050505050565b600082601f83011261430a57600080fd5b81356001600160401b03811115614323576143236141f9565b614336601f8201601f1916602001614237565b81815284602083860101111561434b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561438057600080fd5b853561438b81613d79565b9450602086013561439b81613d79565b935060408601356001600160401b03808211156143b757600080fd5b6143c389838a0161428a565b945060608801359150808211156143d957600080fd5b6143e589838a0161428a565b935060808801359150808211156143fb57600080fd5b50614408888289016142f9565b9150509295509295909350565b6001600160e01b031991909116815260200190565b6000806000806000806000806080898b03121561444657600080fd5b88356001600160401b038082111561445d57600080fd5b6144698c838d01613ca1565b909a50985060208b013591508082111561448257600080fd5b61448e8c838d01613ca1565b909850965060408b01359150808211156144a757600080fd5b6144b38c838d01613ca1565b909650945060608b01359150808211156144cc57600080fd5b506144d98b828c01613ca1565b999c989b5096995094979396929594505050565b6000602082840312156144ff57600080fd5b610f098261403f565b60008060006040848603121561451d57600080fd5b8335925060208401356001600160401b0381111561453a57600080fd5b61454686828701613ca1565b9497909650939450505050565b60005b8381101561456e578181015183820152602001614556565b50506000910152565b6000815180845261458f816020860160208601614553565b601f01601f19169290920160200192915050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156145fa57603f198886030184526145e8858351614577565b945092850192908501906001016145cc565b5092979650505050505050565b600080600080600060a0868803121561461f57600080fd5b853561462a81613d79565b9450602086013561463a81613d79565b9350604086013592506060860135915060808601356001600160401b0381111561466357600080fd5b614408888289016142f9565b60008060006060848603121561468457600080fd5b8335925060208401359150604084013561469d81613d79565b809150509250925092565b6000606082840312156146ba57600080fd5b6146c261420f565b905081356146cf81613d79565b815260208201356146df81613d79565b806020830152506040820135604082015292915050565b80356003811061188557600080fd5b60006060828403121561471757600080fd5b61471f61420f565b905061472a826146f6565b8152602082013560208201526040820135604082015292915050565b6000610160828403121561475957600080fd5b60405160a081018181106001600160401b038211171561477b5761477b6141f9565b6040528235815260208301356002811061479457600080fd5b60208201526147a684604085016146a8565b60408201526147b88460a085016146a8565b60608201526147cb846101008501614705565b60808201529392505050565b634e487b7160e01b600052603260045260246000fd5b606081016147fa85613ef4565b93815260208101929092526001600160a01b031660409091015290565b6040810161482484613ef4565b9281526020015290565b6000610180820190508382528251602083015260208301516148536040840182613f9b565b5060408301516148666060840182613faf565b50606083015161487960c0840182613faf565b5060808301516119e9610120840182613fd6565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000808335601e198436030181126148f257600080fd5b8301803591506001600160401b0382111561490c57600080fd5b6020019150600581901b360382131561137a57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610a0357610a03614924565b602081016010831061496557614965613e08565b91905290565b600181811c9082168061497f57607f821691505b602082108103613c9b57634e487b7160e01b600052602260045260246000fd5b6000808335601e198436030181126149b657600080fd5b8301803591506001600160401b038211156149d057600080fd5b60200191503681900382131561137a57600080fd5b601f821115610db5576000816000526020600020601f850160051c81016020861015614a0e5750805b601f850160051c820191505b81811015614a2d57828155600101614a1a565b505050505050565b6001600160401b03831115614a4c57614a4c6141f9565b614a6083614a5a835461496b565b836149e5565b6000601f841160018114614a945760008515614a7c5750838201355b600019600387901b1c1916600186901b178355611177565b600083815260209020601f19861690835b82811015614ac55786850135825560209485019460019092019101614aa5565b5086821015614ae25760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600060608284031215614b0657600080fd5b610f098383614705565b600060208284031215614b2257600080fd5b610f09826146f6565b600060208284031215614b3d57600080fd5b81518015158114610f0957600080fd5b6001600160e01b03198316815260408101600b8310614b6e57614b6e613e08565b8260208301529392505050565b8183526000602080850194508260005b85811015614bb9578135614b9e81613d79565b6001600160a01b031687529582019590820190600101614b8b565b509495945050505050565b81835260006001600160fb1b03831115614bdd57600080fd5b8260051b80836020870137939093016020019392505050565b604081526000614c0a604083018688614b7b565b8281036020840152614c1d818587614bc4565b979650505050505050565b600060208284031215614c3a57600080fd5b5051919050565b80820180821115610a0357610a03614924565b81810381811115610a0357610a03614924565b600082614c8457634e487b7160e01b600052601260045260246000fd5b500490565b608081526000614c9d608083018a8c614b7b565b60208382036020850152614cb2828a8c614b7b565b91508382036040850152614cc782888a614bc4565b848103606086015285815286925060200160005b86811015614d0757614cec846146f6565b614cf581613ef4565b82529282019290820190600101614cdb565b509c9b505050505050505050505050565b60008251614d2a818460208701614553565b9190910192915050565b60c08101614d428287613fd6565b6001600160a01b0394851660608301529284166080820152921660a090920191909152919050565b600060018201614d7c57614d7c614924565b5060010190565b600060a08284031215614d9557600080fd5b614d9d61420f565b8235614da881613d79565b81526020830135614db881613d79565b6020820152614dca8460408501614705565b60408201529392505050565b600082601f830112614de757600080fd5b81516020614df76142ab83614267565b8083825260208201915060208460051b870101935086841115614e1957600080fd5b602086015b848110156142ee578051614e3181613d79565b8352918301918301614e1e565b600080600060608486031215614e5357600080fd5b83516001600160401b0380821115614e6a57600080fd5b614e7687838801614dd6565b9450602091508186015181811115614e8d57600080fd5b614e9988828901614dd6565b945050604086015181811115614eae57600080fd5b86019050601f81018713614ec157600080fd5b8051614ecf6142ab82614267565b81815260059190911b82018301908381019089831115614eee57600080fd5b928401925b82841015614f275783516bffffffffffffffffffffffff81168114614f185760008081fd5b82529284019290840190614ef3565b80955050505050509250925092565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614f6e816017850160208801614553565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614f9f816028840160208801614553565b01602801949350505050565b602081526000610f096020830184614577565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614c1d90830184614577565b60a081016150068286613fd6565b6001600160a01b03938416606083015291909216608090920191909152919050565b60008161503757615037614924565b506000190190565b634e487b7160e01b600052603160045260246000fd5b60018060a01b0385168152836020820152826040820152608060608201526000614035608083018461457756fea2646970667358221220f2c96cbb22626006ee11ff90975b91b23886e548ed7a61504409d1948b356f0f64736f6c63430008170033",
  "chainId": 2021,
  "contractAbsolutePath": "RoninGatewayV3.sol",
  "deployedBytecode": "",
  "deployer": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "bulkRequestWithdrawalFor((address,address,(uint8,uint256,uint256))[],uint256)": {
        "details": "Bulk requests withdrawals. Emits the `WithdrawalRequested` events."
      },
      "bulkSubmitWithdrawalSignatures(uint256[],bytes[])": {
        "details": "Submits withdrawal signatures. Requirements: - The method caller is a validator."
      },
      "checkThreshold(uint256)": {
        "details": "Checks whether the `_voteWeight` passes the threshold."
      },
      "depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "details": "Deposits based on the receipt. Requirements: - The method caller is a validator. Emits the `Deposited` once the assets are released."
      },
      "depositVoted(uint256,uint256,address)": {
        "details": "Returns whether the deposit is casted by the voter."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getMainchainToken(address,uint256)": {
        "details": "Returns mainchain token address. Reverts for unsupported token."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getThreshold()": {
        "details": "Returns the threshold."
      },
      "getTrustedThreshold()": {
        "details": "Returns the threshold about trusted org."
      },
      "getWithdrawalSignatures(uint256,address[])": {
        "details": "Returns withdrawal signatures."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,uint256,uint256,uint256,uint256,address[],address[][2],uint256[][2],uint8[])": {
        "details": "Initializes contract storage."
      },
      "mainchainWithdrew(uint256)": {
        "details": "Returns whether the withdrawal is done on mainchain."
      },
      "mainchainWithdrewVoted(uint256,address)": {
        "details": "Returns whether the mainchain withdrew is casted by the voter."
      },
      "mapTokens(address[],address[],uint256[],uint8[])": {
        "details": "Maps Ronin tokens to mainchain networks. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event."
      },
      "minimumVoteWeight()": {
        "details": "Returns the minimum vote weight to pass the threshold."
      },
      "pause()": {
        "details": "Triggers paused state."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "requestWithdrawalFor((address,address,(uint8,uint256,uint256)),uint256)": {
        "details": "Locks the assets and request withdrawal. Emits the `WithdrawalRequested` event."
      },
      "requestWithdrawalSignatures(uint256)": {
        "details": "Requests withdrawal signatures for a specific withdrawal. Emits the `WithdrawalSignaturesRequested` event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setEmergencyPauser(address)": {
        "details": "Grant emergency pauser role for `_addr`."
      },
      "setMinimumThresholds(address[],uint256[])": {
        "details": "Sets the minimum thresholds to withdraw. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `MinimumThresholdsUpdated` event."
      },
      "setThreshold(uint256,uint256)": {
        "details": "Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event."
      },
      "tryBulkAcknowledgeMainchainWithdrew(uint256[])": {
        "details": "Marks the withdrawals are done on mainchain and returns the boolean array indicating whether the withdrawal vote is already done before. Requirements: - The method caller is a validator. Emits the `MainchainWithdrew` once the valid call passes the quorum threshold."
      },
      "tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])": {
        "details": "Tries bulk deposits based on the receipts and returns the boolean array indicating whether the deposit vote is already done before. Reverts if the deposit is invalid or is voted by the validator again. Requirements: - The method caller is a validator. Emits the `Deposited` once the assets are released."
      },
      "unpause()": {
        "details": "Triggers unpaused state."
      }
    },
    "events": {
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "DepositVoted(address,uint256,uint256,bytes32)": {
        "details": "Emitted when a deposit is voted"
      },
      "Deposited(bytes32,(uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "details": "Emitted when the assets are depositted"
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MainchainWithdrew(bytes32,(uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "details": "Emitted when the assets are withdrawn on mainchain"
      },
      "MinimumThresholdsUpdated(address[],uint256[])": {
        "details": "Emitted when the minimum thresholds are updated"
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the threshold is updated"
      },
      "TokenMapped(address[],address[],uint256[],uint8[])": {
        "details": "Emitted when the tokens are mapped"
      },
      "TrustedThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the threshold is updated"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "WithdrawalRequested(bytes32,(uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "details": "Emitted when the withdrawal is requested"
      },
      "WithdrawalSignaturesRequested(bytes32,(uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "details": "Emitted when the withdrawal signatures is requested"
      }
    },
    "errors": {
      "ErrAlreadyVoted(address)": [
        {
          "details": "Error indicating that a voter has already voted.",
          "params": {
            "voter": "The address of the voter who has already voted."
          }
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrERC1155MintingFailed()": [
        {
          "details": "Error indicating that the mint of ERC1155 tokens has failed."
        }
      ],
      "ErrERC20MintingFailed()": [
        {
          "details": "Error indicating that the minting of ERC20 tokens has failed."
        }
      ],
      "ErrERC721MintingFailed()": [
        {
          "details": "Error indicating that the minting of ERC721 tokens has failed."
        }
      ],
      "ErrEmptyArray()": [
        {
          "details": "Error indicating that an array is empty when it should contain elements."
        }
      ],
      "ErrInvalidChainId(bytes4,uint256,uint256)": [
        {
          "details": "Error indicating that the chain ID is invalid.",
          "params": {
            "actual": "Current chain ID that executing function.",
            "expected": "Expected chain ID required for the tx to success.",
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid chain ID."
          }
        }
      ],
      "ErrInvalidInfo()": [
        {
          "details": "Error indicating that the provided information is invalid."
        }
      ],
      "ErrInvalidReceipt()": [
        {
          "details": "Error indicating that a receipt is invalid."
        }
      ],
      "ErrInvalidReceiptKind()": [
        {
          "details": "Error indicating that a receipt kind is invalid."
        }
      ],
      "ErrInvalidRequest()": [
        {
          "details": "Error indicating that a request is invalid."
        }
      ],
      "ErrInvalidThreshold(bytes4)": [
        {
          "details": "Error indicating that the provided threshold is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that the invalid threshold applies to."
          }
        }
      ],
      "ErrInvalidTokenStandard()": [
        {
          "details": "Error indicating that a token standard is invalid."
        }
      ],
      "ErrInvalidTrustedThreshold()": [
        {
          "details": "Error thrown when an invalid trusted threshold is specified."
        }
      ],
      "ErrLengthMismatch(bytes4)": [
        {
          "details": "Error indicating a mismatch in the length of input parameters or arrays for a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that has a length mismatch."
          }
        }
      ],
      "ErrQueryForTooSmallQuantity()": [
        {
          "details": "Throwed when the ERC20 withdrawal quantity is less than the minimum threshold."
        }
      ],
      "ErrTokenCouldNotTransfer((uint8,uint256,uint256),address,address)": [
        {
          "details": "Error indicating that the `transfer` has failed.",
          "params": {
            "to": "Receiver of the token value.",
            "token": "Address of the token.",
            "tokenInfo": "Info of the token including ERC standard, id or quantity."
          }
        }
      ],
      "ErrTokenCouldNotTransferFrom((uint8,uint256,uint256),address,address,address)": [
        {
          "details": "Error indicating that the `handleAssetIn` has failed.",
          "params": {
            "from": "Owner of the token value.",
            "to": "Receiver of the token value.",
            "token": "Address of the token.",
            "tokenInfo": "Info of the token including ERC standard, id or quantity."
          }
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnsupportedStandard()": [
        {
          "details": "Error indicating that an unsupported standard is encountered."
        }
      ],
      "ErrUnsupportedToken()": [
        {
          "details": "Error indicating that a token is not supported."
        }
      ],
      "ErrWithdrawalsMigrated()": [
        {
          "details": "Error thrown when attempting to withdraw funds that have already been migrated."
        }
      ],
      "ErrWithdrawnOnMainchainAlready()": [
        {
          "details": "Error thrown when attempting to withdraw funds that have already been withdrawn on the mainchain."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"ErrAlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrERC1155MintingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrERC20MintingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrERC721MintingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEmptyArray\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ErrInvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidReceipt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidReceiptKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidTokenStandard\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidTrustedThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForTooSmallQuantity\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ErrTokenCouldNotTransfer\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ErrTokenCouldNotTransferFrom\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnsupportedStandard\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnsupportedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawalsMigrated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawnOnMainchainAlready\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"}],\"name\":\"DepositVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"MainchainWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"threshold\",\"type\":\"uint256[]\"}],\"name\":\"MinimumThresholdsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"roninTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"enum TokenStandard[]\",\"name\":\"standards\",\"type\":\"uint8[]\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"TrustedThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"WithdrawalSignaturesRequested\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Request[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"bulkRequestWithdrawalFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"withdrawals\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"bulkSubmitWithdrawalSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Receipt\",\"name\":\"_receipt\",\"type\":\"tuple\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositVote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"finalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"depositVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roninToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getMainchainToken\",\"outputs\":[{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct MappedTokenConsumer.MappedToken\",\"name\":\"_token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trustedNum_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trustedDenom_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"getWithdrawalSignatures\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleSetter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trustedNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trustedDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[][2]\",\"name\":\"_packedAddresses\",\"type\":\"address[][2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"_packedNumbers\",\"type\":\"uint256[][2]\"},{\"internalType\":\"enum TokenStandard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAdmin\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalId\",\"type\":\"uint256\"}],\"name\":\"mainchainWithdrew\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainchainWithdrewVote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"finalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"mainchainWithdrewVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_roninTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum TokenStandard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"}],\"name\":\"mapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mainchainToken\",\"type\":\"address\"}],\"name\":\"minimumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Request\",\"name\":\"_request\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawalFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalId\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawalSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEmergencyPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setMinimumThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trustedNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trustedDenominator\",\"type\":\"uint256\"}],\"name\":\"setTrustedThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_withdrawalIds\",\"type\":\"uint256[]\"}],\"name\":\"tryBulkAcknowledgeMainchainWithdrew\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_executedReceipts\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Receipt[]\",\"name\":\"receipts\",\"type\":\"tuple[]\"}],\"name\":\"tryBulkDepositFor\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_executedReceipts\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenOwner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum TokenStandard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalStatVote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"finalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyVoted(address)\":[{\"details\":\"Error indicating that a voter has already voted.\",\"params\":{\"voter\":\"The address of the voter who has already voted.\"}}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrERC1155MintingFailed()\":[{\"details\":\"Error indicating that the mint of ERC1155 tokens has failed.\"}],\"ErrERC20MintingFailed()\":[{\"details\":\"Error indicating that the minting of ERC20 tokens has failed.\"}],\"ErrERC721MintingFailed()\":[{\"details\":\"Error indicating that the minting of ERC721 tokens has failed.\"}],\"ErrEmptyArray()\":[{\"details\":\"Error indicating that an array is empty when it should contain elements.\"}],\"ErrInvalidChainId(bytes4,uint256,uint256)\":[{\"details\":\"Error indicating that the chain ID is invalid.\",\"params\":{\"actual\":\"Current chain ID that executing function.\",\"expected\":\"Expected chain ID required for the tx to success.\",\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid chain ID.\"}}],\"ErrInvalidInfo()\":[{\"details\":\"Error indicating that the provided information is invalid.\"}],\"ErrInvalidReceipt()\":[{\"details\":\"Error indicating that a receipt is invalid.\"}],\"ErrInvalidReceiptKind()\":[{\"details\":\"Error indicating that a receipt kind is invalid.\"}],\"ErrInvalidRequest()\":[{\"details\":\"Error indicating that a request is invalid.\"}],\"ErrInvalidThreshold(bytes4)\":[{\"details\":\"Error indicating that the provided threshold is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the invalid threshold applies to.\"}}],\"ErrInvalidTokenStandard()\":[{\"details\":\"Error indicating that a token standard is invalid.\"}],\"ErrInvalidTrustedThreshold()\":[{\"details\":\"Error thrown when an invalid trusted threshold is specified.\"}],\"ErrLengthMismatch(bytes4)\":[{\"details\":\"Error indicating a mismatch in the length of input parameters or arrays for a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that has a length mismatch.\"}}],\"ErrQueryForTooSmallQuantity()\":[{\"details\":\"Throwed when the ERC20 withdrawal quantity is less than the minimum threshold.\"}],\"ErrTokenCouldNotTransfer((uint8,uint256,uint256),address,address)\":[{\"details\":\"Error indicating that the `transfer` has failed.\",\"params\":{\"to\":\"Receiver of the token value.\",\"token\":\"Address of the token.\",\"tokenInfo\":\"Info of the token including ERC standard, id or quantity.\"}}],\"ErrTokenCouldNotTransferFrom((uint8,uint256,uint256),address,address,address)\":[{\"details\":\"Error indicating that the `handleAssetIn` has failed.\",\"params\":{\"from\":\"Owner of the token value.\",\"to\":\"Receiver of the token value.\",\"token\":\"Address of the token.\",\"tokenInfo\":\"Info of the token including ERC standard, id or quantity.\"}}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnsupportedStandard()\":[{\"details\":\"Error indicating that an unsupported standard is encountered.\"}],\"ErrUnsupportedToken()\":[{\"details\":\"Error indicating that a token is not supported.\"}],\"ErrWithdrawalsMigrated()\":[{\"details\":\"Error thrown when attempting to withdraw funds that have already been migrated.\"}],\"ErrWithdrawnOnMainchainAlready()\":[{\"details\":\"Error thrown when attempting to withdraw funds that have already been withdrawn on the mainchain.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"DepositVoted(address,uint256,uint256,bytes32)\":{\"details\":\"Emitted when a deposit is voted\"},\"Deposited(bytes32,(uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"details\":\"Emitted when the assets are depositted\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MainchainWithdrew(bytes32,(uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"details\":\"Emitted when the assets are withdrawn on mainchain\"},\"MinimumThresholdsUpdated(address[],uint256[])\":{\"details\":\"Emitted when the minimum thresholds are updated\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the threshold is updated\"},\"TokenMapped(address[],address[],uint256[],uint8[])\":{\"details\":\"Emitted when the tokens are mapped\"},\"TrustedThresholdUpdated(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the threshold is updated\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"WithdrawalRequested(bytes32,(uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"details\":\"Emitted when the withdrawal is requested\"},\"WithdrawalSignaturesRequested(bytes32,(uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"details\":\"Emitted when the withdrawal signatures is requested\"}},\"kind\":\"dev\",\"methods\":{\"bulkRequestWithdrawalFor((address,address,(uint8,uint256,uint256))[],uint256)\":{\"details\":\"Bulk requests withdrawals. Emits the `WithdrawalRequested` events.\"},\"bulkSubmitWithdrawalSignatures(uint256[],bytes[])\":{\"details\":\"Submits withdrawal signatures. Requirements: - The method caller is a validator.\"},\"checkThreshold(uint256)\":{\"details\":\"Checks whether the `_voteWeight` passes the threshold.\"},\"depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"details\":\"Deposits based on the receipt. Requirements: - The method caller is a validator. Emits the `Deposited` once the assets are released.\"},\"depositVoted(uint256,uint256,address)\":{\"details\":\"Returns whether the deposit is casted by the voter.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getMainchainToken(address,uint256)\":{\"details\":\"Returns mainchain token address. Reverts for unsupported token.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getThreshold()\":{\"details\":\"Returns the threshold.\"},\"getTrustedThreshold()\":{\"details\":\"Returns the threshold about trusted org.\"},\"getWithdrawalSignatures(uint256,address[])\":{\"details\":\"Returns withdrawal signatures.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,uint256,uint256,uint256,uint256,address[],address[][2],uint256[][2],uint8[])\":{\"details\":\"Initializes contract storage.\"},\"mainchainWithdrew(uint256)\":{\"details\":\"Returns whether the withdrawal is done on mainchain.\"},\"mainchainWithdrewVoted(uint256,address)\":{\"details\":\"Returns whether the mainchain withdrew is casted by the voter.\"},\"mapTokens(address[],address[],uint256[],uint8[])\":{\"details\":\"Maps Ronin tokens to mainchain networks. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event.\"},\"minimumVoteWeight()\":{\"details\":\"Returns the minimum vote weight to pass the threshold.\"},\"pause()\":{\"details\":\"Triggers paused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"requestWithdrawalFor((address,address,(uint8,uint256,uint256)),uint256)\":{\"details\":\"Locks the assets and request withdrawal. Emits the `WithdrawalRequested` event.\"},\"requestWithdrawalSignatures(uint256)\":{\"details\":\"Requests withdrawal signatures for a specific withdrawal. Emits the `WithdrawalSignaturesRequested` event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setEmergencyPauser(address)\":{\"details\":\"Grant emergency pauser role for `_addr`.\"},\"setMinimumThresholds(address[],uint256[])\":{\"details\":\"Sets the minimum thresholds to withdraw. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `MinimumThresholdsUpdated` event.\"},\"setThreshold(uint256,uint256)\":{\"details\":\"Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event.\"},\"tryBulkAcknowledgeMainchainWithdrew(uint256[])\":{\"details\":\"Marks the withdrawals are done on mainchain and returns the boolean array indicating whether the withdrawal vote is already done before. Requirements: - The method caller is a validator. Emits the `MainchainWithdrew` once the valid call passes the quorum threshold.\"},\"tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])\":{\"details\":\"Tries bulk deposits based on the receipts and returns the boolean array indicating whether the deposit vote is already done before. Reverts if the deposit is invalid or is voted by the validator again. Requirements: - The method caller is a validator. Emits the `Deposited` once the assets are released.\"},\"unpause()\":{\"details\":\"Triggers unpaused state.\"}},\"stateVariables\":{\"____deprecated0\":{\"custom:deprecated\":\"Previously `_validatorContract` (non-zero value)\"},\"____deprecated1\":{\"custom:deprecated\":\"Previously `_bridgeTrackingContract` (non-zero value)\"},\"____deprecated2\":{\"custom:deprecated\":\"Previously `_trustedOrgContract` (non-zero value)\"},\"___deprecated4\":{\"custom:deprecated\":\"Previously `withdrawalMigrated` (non-zero value)\"},\"_mainchainToken\":{\"details\":\"Mapping from token address => chain id => mainchain token address\"},\"_withdrawalSig\":{\"details\":\"Mapping from withdrawal id => validator address => signatures\"},\"depositVote\":{\"details\":\"Mapping from chain id => deposit id => deposit vote\"},\"mainchainWithdrewVote\":{\"details\":\"Mapping from withdrawal id => mainchain withdrew vote\"},\"withdrawal\":{\"details\":\"Mapping from withdrawal id => withdrawal receipt\"},\"withdrawalCount\":{\"details\":\"Total withdrawal\"},\"withdrawalStatVote\":{\"details\":\"Mapping from withdrawal id => vote for recording withdrawal stats\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"notice\":\"The assets will be transferred whenever the valid call passes the quorum threshold.\"},\"tryBulkAcknowledgeMainchainWithdrew(uint256[])\":{\"notice\":\"Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time.\"},\"tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])\":{\"notice\":\"The assets will be transferred whenever the valid call for the receipt passes the quorum threshold. Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ronin/gateway/RoninGatewayV3.sol\":\"RoninGatewayV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@fdk/=lib/foundry-deployment-kit/script/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=src/\",\":@ronin/script/=script/\",\":@ronin/test/=test/\",\":contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/foundry-deployment-kit/lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xb11d1ade7146ac3da122e1f387ea82b0bd385d50823946c3f967dbffef3e9f4f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdad22b949de979bb2ad9001c044b2aeaacf8a25e3de09ed6f022a9469f936d5b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/presets/ERC1155PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../extensions/ERC1155Burnable.sol\\\";\\nimport \\\"../extensions/ERC1155Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC1155} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC1155PresetMinterPauser is Context, AccessControlEnumerable, ERC1155Burnable, ERC1155Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\\n     * deploys the contract.\\n     */\\n    constructor(string memory uri) ERC1155(uri) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\");\\n\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\");\\n\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable, ERC1155)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Pausable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x775e248004d21e0666740534a732daa9f17ceeee660ded876829e98a3a62b657\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"src/extensions/GatewayV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../interfaces/IQuorum.sol\\\";\\nimport \\\"./collections/HasProxyAdmin.sol\\\";\\n\\nabstract contract GatewayV3 is HasProxyAdmin, Pausable, IQuorum {\\n  uint256 internal _num;\\n  uint256 internal _denom;\\n\\n  address private ______deprecated;\\n  uint256 public nonce;\\n\\n  address public emergencyPauser;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  /**\\n   * @dev Grant emergency pauser role for `_addr`.\\n   */\\n  function setEmergencyPauser(address _addr) external onlyProxyAdmin {\\n    emergencyPauser = _addr;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function getThreshold() external view virtual returns (uint256 num_, uint256 denom_) {\\n    return (_num, _denom);\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * _denom >= _num * _getTotalWeight();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator) external virtual onlyProxyAdmin {\\n    return _setThreshold(_numerator, _denominator);\\n  }\\n\\n  /**\\n   * @dev Triggers paused state.\\n   */\\n  function pause() external {\\n    _requireAuth();\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Triggers unpaused state.\\n   */\\n  function unpause() external {\\n    _requireAuth();\\n    _unpause();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function minimumVoteWeight() public view virtual returns (uint256) {\\n    return _minimumVoteWeight(_getTotalWeight());\\n  }\\n\\n  /**\\n   * @dev Sets threshold and returns the old one.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function _setThreshold(uint256 num, uint256 denom) internal virtual {\\n    if (num > denom) revert ErrInvalidThreshold(msg.sig);\\n    uint256 prevNum = _num;\\n    uint256 prevDenom = _denom;\\n    _num = num;\\n    _denom = denom;\\n    unchecked {\\n      emit ThresholdUpdated(nonce++, num, denom, prevNum, prevDenom);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns minimum vote weight.\\n   */\\n  function _minimumVoteWeight(uint256 _totalWeight) internal view virtual returns (uint256) {\\n    return (_num * _totalWeight + _denom - 1) / _denom;\\n  }\\n\\n  /**\\n   * @dev Internal method to check method caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The method caller must be admin or pauser.\\n   *\\n   */\\n  function _requireAuth() private view {\\n    if (!(msg.sender == _getProxyAdmin() || msg.sender == emergencyPauser)) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total weight.\\n   */\\n  function _getTotalWeight() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x010a0021a377e4b23a4f56269b9c6e3e3fc2684897928ff9b9da1b47c3f07baf\",\"license\":\"MIT\"},\"src/extensions/MinimumWithdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./collections/HasProxyAdmin.sol\\\";\\nimport \\\"../libraries/Transfer.sol\\\";\\n\\nabstract contract MinimumWithdrawal is HasProxyAdmin {\\n  /// @dev Throwed when the ERC20 withdrawal quantity is less than the minimum threshold.\\n  error ErrQueryForTooSmallQuantity();\\n\\n  /// @dev Emitted when the minimum thresholds are updated\\n  event MinimumThresholdsUpdated(address[] tokens, uint256[] threshold);\\n\\n  /// @dev Mapping from mainchain token address => minimum thresholds\\n  mapping(address mainchainToken => uint256) public minimumThreshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @dev Sets the minimum thresholds to withdraw.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `MinimumThresholdsUpdated` event.\\n   *\\n   */\\n  function setMinimumThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external virtual onlyProxyAdmin {\\n    if (_tokens.length == 0) revert ErrEmptyArray();\\n    _setMinimumThresholds(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets minimum thresholds.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   *\\n   * Emits the `MinimumThresholdsUpdated` event.\\n   *\\n   */\\n  function _setMinimumThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) internal virtual {\\n    if (_tokens.length != _thresholds.length) revert ErrLengthMismatch(msg.sig);\\n\\n    for (uint256 _i; _i < _tokens.length;) {\\n      minimumThreshold[_tokens[_i]] = _thresholds[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit MinimumThresholdsUpdated(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Checks whether the request is larger than or equal to the minimum threshold.\\n   */\\n  function _checkWithdrawal(Transfer.Request calldata _request) internal view {\\n    if (_request.info.erc == TokenStandard.ERC20 && _request.info.quantity < minimumThreshold[_request.tokenAddr]) {\\n      revert ErrQueryForTooSmallQuantity();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x56a1e5650f8a9046d5afbc161ac9ffdb75cc2c9c4bea13325f2363abafee6985\",\"license\":\"MIT\"},\"src/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(address _logic, address admin_, bytes memory _data) payable TransparentUpgradeableProxy(_logic, admin_, _data) { }\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x45fc7b71d09da99414b977a56e586b3604670d865e5f36f395d5c98bc4ba64af\",\"license\":\"MIT\"},\"src/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyProxyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf7dbefa31230e6e4bd319f02d94893cbfd07ee12a0e016f5fadc57660df01891\",\"license\":\"MIT\"},\"src/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyProxyAdmin() {\\n    _requireProxyAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getProxyAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireProxyAdmin() internal view {\\n    if (msg.sender != _getProxyAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0xad3db02c99a960b60151f2ad45eed46073d14fe1ed861f496c7aeefacbbc528e\",\"license\":\"MIT\"},\"src/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IERC20Mintable {\\n  function mint(address _to, uint256 _value) external returns (bool _success);\\n}\\n\",\"keccak256\":\"0x6632cb3345e581a0b7868d6ce9a883f55d107576f9557f500a042c8285e51005\",\"license\":\"MIT\"},\"src/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Mintable {\\n  function mint(address _to, uint256 _tokenId) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4f001516a2596c79c205a9e28de092aa866eb440040e78b8be9027451028f169\",\"license\":\"MIT\"},\"src/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(uint256 indexed nonce, uint256 indexed numerator, uint256 indexed denominator, uint256 previousNumerator, uint256 previousDenominator);\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 numerator, uint256 denominator) external;\\n}\\n\",\"keccak256\":\"0xc924e9480f59acc9bc8c033f05d3be9451de5cee0c224d76d4542fa5b67fa10f\",\"license\":\"MIT\"},\"src/interfaces/IRoninGatewayV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/Transfer.sol\\\";\\nimport \\\"./consumers/MappedTokenConsumer.sol\\\";\\n\\ninterface IRoninGatewayV3 is MappedTokenConsumer {\\n  /**\\n   * @dev Error thrown when attempting to withdraw funds that have already been migrated.\\n   */\\n  error ErrWithdrawalsMigrated();\\n\\n  /**\\n   * @dev Error thrown when an invalid trusted threshold is specified.\\n   */\\n  error ErrInvalidTrustedThreshold();\\n\\n  /**\\n   * @dev Error thrown when attempting to withdraw funds that have already been withdrawn on the mainchain.\\n   */\\n  error ErrWithdrawnOnMainchainAlready();\\n\\n  /// @dev Emitted when the assets are depositted\\n  event Deposited(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the withdrawal is requested\\n  event WithdrawalRequested(bytes32 receiptHash, Transfer.Receipt);\\n  /// @dev Emitted when the assets are withdrawn on mainchain\\n  event MainchainWithdrew(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the withdrawal signatures is requested\\n  event WithdrawalSignaturesRequested(bytes32 receiptHash, Transfer.Receipt);\\n  /// @dev Emitted when the tokens are mapped\\n  event TokenMapped(address[] roninTokens, address[] mainchainTokens, uint256[] chainIds, TokenStandard[] standards);\\n  /// @dev Emitted when the threshold is updated\\n  event TrustedThresholdUpdated(\\n    uint256 indexed nonce, uint256 indexed numerator, uint256 indexed denominator, uint256 previousNumerator, uint256 previousDenominator\\n  );\\n  /// @dev Emitted when a deposit is voted\\n  event DepositVoted(address indexed bridgeOperator, uint256 indexed id, uint256 indexed chainId, bytes32 receiptHash);\\n\\n  /**\\n   * @dev Returns withdrawal count.\\n   */\\n  function withdrawalCount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns withdrawal signatures.\\n   */\\n  function getWithdrawalSignatures(uint256 _withdrawalId, address[] calldata _validators) external view returns (bytes[] memory);\\n\\n  /**\\n   * @dev Deposits based on the receipt.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   * Emits the `Deposited` once the assets are released.\\n   *\\n   * @notice The assets will be transferred whenever the valid call passes the quorum threshold.\\n   *\\n   */\\n  function depositFor(Transfer.Receipt calldata _receipt) external;\\n\\n  /**\\n   * @dev Marks the withdrawals are done on mainchain and returns the boolean array indicating whether the withdrawal\\n   * vote is already done before.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   * Emits the `MainchainWithdrew` once the valid call passes the quorum threshold.\\n   *\\n   * @notice Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the\\n   * same time.\\n   *\\n   */\\n  function tryBulkAcknowledgeMainchainWithdrew(uint256[] calldata _withdrawalIds) external returns (bool[] memory);\\n\\n  /**\\n   * @dev Tries bulk deposits based on the receipts and returns the boolean array indicating whether the deposit vote\\n   * is already done before. Reverts if the deposit is invalid or is voted by the validator again.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   * Emits the `Deposited` once the assets are released.\\n   *\\n   * @notice The assets will be transferred whenever the valid call for the receipt passes the quorum threshold. Not\\n   * reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time.\\n   *\\n   */\\n  function tryBulkDepositFor(Transfer.Receipt[] calldata _receipts) external returns (bool[] memory);\\n\\n  /**\\n   * @dev Locks the assets and request withdrawal.\\n   *\\n   * Emits the `WithdrawalRequested` event.\\n   *\\n   */\\n  function requestWithdrawalFor(Transfer.Request calldata _request, uint256 _chainId) external;\\n\\n  /**\\n   * @dev Bulk requests withdrawals.\\n   *\\n   * Emits the `WithdrawalRequested` events.\\n   *\\n   */\\n  function bulkRequestWithdrawalFor(Transfer.Request[] calldata _requests, uint256 _chainId) external;\\n\\n  /**\\n   * @dev Requests withdrawal signatures for a specific withdrawal.\\n   *\\n   * Emits the `WithdrawalSignaturesRequested` event.\\n   *\\n   */\\n  function requestWithdrawalSignatures(uint256 _withdrawalId) external;\\n\\n  /**\\n   * @dev Submits withdrawal signatures.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   */\\n  function bulkSubmitWithdrawalSignatures(uint256[] calldata _withdrawals, bytes[] calldata _signatures) external;\\n\\n  /**\\n   * @dev Maps Ronin tokens to mainchain networks.\\n   *\\n   * Requirement:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function mapTokens(\\n    address[] calldata _roninTokens,\\n    address[] calldata _mainchainTokens,\\n    uint256[] calldata chainIds,\\n    TokenStandard[] calldata _standards\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the deposit is casted by the voter.\\n   */\\n  function depositVoted(uint256 _chainId, uint256 _depositId, address _voter) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the mainchain withdrew is casted by the voter.\\n   */\\n  function mainchainWithdrewVoted(uint256 _withdrawalId, address _voter) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the withdrawal is done on mainchain.\\n   */\\n  function mainchainWithdrew(uint256 _withdrawalId) external view returns (bool);\\n\\n  /**\\n   * @dev Returns mainchain token address.\\n   * Reverts for unsupported token.\\n   */\\n  function getMainchainToken(address _roninToken, uint256 _chainId) external view returns (MappedToken memory _token);\\n}\\n\",\"keccak256\":\"0x063bbad71da3acad745c2f2bf306643a3e089f430d1ba10e095de2ba108aeb87\",\"license\":\"MIT\"},\"src/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n  event Transfer(address indexed src, address indexed dst, uint wad);\\n\\n  function deposit() external payable;\\n\\n  function transfer(address dst, uint wad) external returns (bool);\\n\\n  function approve(address guy, uint wad) external returns (bool);\\n\\n  function transferFrom(address src, address dst, uint wad) external returns (bool);\\n\\n  function withdraw(uint256 _wad) external;\\n\\n  function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x000700e2b9c1985d53bb1cdba435f0f3d7b48e76e596e7dbbdfec1da47131415\",\"license\":\"MIT\"},\"src/interfaces/bridge/IBridgeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeManagerEvents } from \\\"./events/IBridgeManagerEvents.sol\\\";\\n\\n/**\\n * @title IBridgeManager\\n * @dev The interface for managing bridge operators.\\n */\\ninterface IBridgeManager is IBridgeManagerEvents {\\n  /// @notice Error indicating that cannot find the querying operator\\n  error ErrOperatorNotFound(address operator);\\n  /// @notice Error indicating that cannot find the querying governor\\n  error ErrGovernorNotFound(address governor);\\n  /// @notice Error indicating that the msg.sender is not match the required governor\\n  error ErrGovernorNotMatch(address required, address sender);\\n  /// @notice Error indicating that the governors list will go below minimum number of required governor.\\n  error ErrBelowMinRequiredGovernors();\\n  /// @notice Common invalid input error\\n  error ErrInvalidInput();\\n\\n  /**\\n   * @dev The domain separator used for computing hash digests in the contract.\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @dev Returns the total number of bridge operators.\\n   * @return The total number of bridge operators.\\n   */\\n  function totalBridgeOperator() external view returns (uint256);\\n\\n  /**\\n   * @dev Checks if the given address is a bridge operator.\\n   * @param addr The address to check.\\n   * @return A boolean indicating whether the address is a bridge operator.\\n   */\\n  function isBridgeOperator(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Retrieves the full information of all registered bridge operators.\\n   *\\n   * This external function allows external callers to obtain the full information of all the registered bridge operators.\\n   * The returned arrays include the addresses of governors, bridge operators, and their corresponding vote weights.\\n   *\\n   * @return governors An array of addresses representing the governors of each bridge operator.\\n   * @return bridgeOperators An array of addresses representing the registered bridge operators.\\n   * @return weights An array of uint256 values representing the vote weights of each bridge operator.\\n   *\\n   * Note: The length of each array will be the same, and the order of elements corresponds to the same bridge operator.\\n   *\\n   * Example Usage:\\n   * ```\\n   * (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights) = getFullBridgeOperatorInfos();\\n   * for (uint256 i = 0; i < bridgeOperators.length; i++) {\\n   *     // Access individual information for each bridge operator.\\n   *     address governor = governors[i];\\n   *     address bridgeOperator = bridgeOperators[i];\\n   *     uint256 weight = weights[i];\\n   *     // ... (Process or use the information as required) ...\\n   * }\\n   * ```\\n   *\\n   */\\n  function getFullBridgeOperatorInfos() external view returns (address[] memory governors, address[] memory bridgeOperators, uint96[] memory weights);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorsWeight(address[] calldata governors) external view returns (uint256 sum);\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function getTotalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns an array of all bridge operators.\\n   * @return An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the corresponding `operator` of a `governor`.\\n   */\\n  function getOperatorOf(address governor) external view returns (address operator);\\n\\n  /**\\n   * @dev Returns the corresponding `governor` of a `operator`.\\n   */\\n  function getGovernorOf(address operator) external view returns (address governor);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific governor.\\n   * @param governor The address of the governor to get the vote weight for.\\n   * @return voteWeight The vote weight of the specified governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint96);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific bridge operator.\\n   * @param bridgeOperator The address of the bridge operator to get the vote weight for.\\n   * @return weight The vote weight of the specified bridge operator.\\n   */\\n  function getBridgeOperatorWeight(address bridgeOperator) external view returns (uint96 weight);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata governors) external view returns (uint96[] memory weights);\\n\\n  /**\\n   * @dev Returns an array of all governors.\\n   * @return An array containing the addresses of all governors.\\n   */\\n  function getGovernors() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Adds multiple bridge operators.\\n   * @param governors An array of addresses of hot/cold wallets for bridge operator to update their node address.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to add.\\n   */\\n  function addBridgeOperators(uint96[] calldata voteWeights, address[] calldata governors, address[] calldata bridgeOperators) external;\\n\\n  /**\\n   * @dev Removes multiple bridge operators.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to remove.\\n   */\\n  function removeBridgeOperators(address[] calldata bridgeOperators) external;\\n\\n  /**\\n   * @dev Self-call to update the minimum required governor.\\n   * @param min The minimum number, this must not less than 3.\\n   */\\n  function setMinRequiredGovernor(uint min) external;\\n}\\n\",\"keccak256\":\"0xefc46318a240371031e77ef3c355e2c18432e4479145378de6782277f9b44923\",\"license\":\"MIT\"},\"src/interfaces/bridge/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  struct Request {\\n    VoteKind kind;\\n    uint256 id;\\n  }\\n\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  event ExternalCallFailed(address indexed to, bytes4 indexed msgSig, bytes reason);\\n\\n  /**\\n   * @dev Returns the block that allow incomming mutable call.\\n   */\\n  function startedAtBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVote(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallot(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function getManyTotalBallots(uint256 _period, address[] calldata _bridgeOperators) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(VoteKind _kind, uint256 _requestId, address _operator) external;\\n}\\n\",\"keccak256\":\"0x53ac425ff6efebc200030ceef302c2871a4b2edfcc5e512ce326aa704989ff7a\",\"license\":\"MIT\"},\"src/interfaces/bridge/events/IBridgeManagerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeManagerEvents {\\n  /**\\n   * @dev Emitted when new bridge operators are added.\\n   */\\n  event BridgeOperatorsAdded(bool[] statuses, uint96[] voteWeights, address[] governors, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when a bridge operator is failed to add.\\n   */\\n  event BridgeOperatorAddingFailed(address indexed operator);\\n\\n  /**\\n   * @dev Emitted when bridge operators are removed.\\n   */\\n  event BridgeOperatorsRemoved(bool[] statuses, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when a bridge operator is failed to remove.\\n   */\\n  event BridgeOperatorRemovingFailed(address indexed operator);\\n\\n  /**\\n   * @dev Emitted when a bridge operator is updated.\\n   */\\n  event BridgeOperatorUpdated(address indexed governor, address indexed fromBridgeOperator, address indexed toBridgeOperator);\\n\\n  /**\\n   * @dev Emitted when the minimum number of required governors is updated.\\n   */\\n  event MinRequiredGovernorUpdated(uint min);\\n}\\n\",\"keccak256\":\"0x38bc3709c98a7c08fb9b6fa3e07a725903dcb0bd07de8a828bac6c3bcf7d997d\",\"license\":\"MIT\"},\"src/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"src/interfaces/consumers/MappedTokenConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/LibTokenInfo.sol\\\";\\n\\ninterface MappedTokenConsumer {\\n  struct MappedToken {\\n    TokenStandard erc;\\n    address tokenAddr;\\n  }\\n}\\n\",\"keccak256\":\"0xc53dcba9dc7d950ab6561149f76b45617ddbce5037e4c86ea00b976018bbfde1\",\"license\":\"MIT\"},\"src/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected,\\n    Expired\\n  }\\n}\\n\",\"keccak256\":\"0xa5045232c0c053fcf31fb3fe71942344444159c48d5f1b2063dbb06b6a1c9752\",\"license\":\"MIT\"},\"src/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address ______deprecatedbridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed consensusAddr, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(address _admin, address _consensusAddr, address payable _treasuryAddr, uint256 _commissionRate) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address _consensusAddr, uint256 _effectiveTimestamp, uint256 _rate) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x37b15d36774a3f18291e85efa9df6caaf52b8fa751a8222a3ac8f467656950c1\",\"license\":\"MIT\"},\"src/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(address indexed coinbaseAddr, uint256 rewardAmount, BlockRewardDeprecatedType deprecatedType);\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(address indexed consensusAddr, address indexed recipient, uint256 amount, uint256 contractBalance);\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(address indexed consensusAddr, address indexed bridgeOperator, address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr, address indexed bridgeOperator, address indexed recipient, uint256 amount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(address indexed consensusAddr, address indexed recipient, uint256 amount, uint256 contractBalance);\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts, uint256 contractBalance);\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x3030ef01bb0277f8607fb3b6358a4cd1d75f6a756e5c884153fbf94f0a16b4d4\",\"license\":\"MIT\"},\"src/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(address indexed consensusAddr, address indexed recipient, uint256 unlockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(address indexed consensusAddr, address indexed recipient, uint256 unlockedAmount, uint256 contractBalance);\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x2df640817e7fb957f923dd583e82be9610a8441735b69519db5bd9457683bec2\",\"license\":\"MIT\"},\"src/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is ICandidateManager, ICommonInfo, ISlashingExecution, ICoinbaseExecution, IEmergencyExit { }\\n\",\"keccak256\":\"0x5ae53ab78a38d9c59d74b4723ead82146bc402874ebbdc90b70ce084516e010f\",\"license\":\"MIT\"},\"src/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address validatorAddr, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0xac0b772f2fca9dafd7cc6742f91b442f9f545bf9472185b8d817fe045b680193\",\"license\":\"MIT\"},\"src/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0x4a215273f535697ecf54a97c8fd9de9c666ca64b88dafe7ab60b2903f71ffb41\",\"license\":\"MIT\"},\"src/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd83e85bea11509406213b8d06956b33238d27fa1b5e555c1f064bdfd41d6d216\",\"license\":\"MIT\"},\"src/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"src/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA;) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB;) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xce5d578861167da47a965c8a0e1592b808aad6eb79ccb1873bf2e2280ddb85ee\",\"license\":\"UNLICENSED\"},\"src/libraries/IsolatedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/consumers/VoteStatusConsumer.sol\\\";\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary IsolatedGovernance {\\n  struct Vote {\\n    VoteStatusConsumer.VoteStatus status;\\n    bytes32 finalHash;\\n    /// @dev Mapping from voter => receipt hash\\n    mapping(address => bytes32) voteHashOf;\\n    /// @dev The timestamp that voting is expired (no expiration=0)\\n    uint256 expiredAt;\\n    /// @dev The timestamp that voting is created\\n    uint256 createdAt;\\n    /// @dev The list of voters\\n    address[] voters;\\n  }\\n\\n  /**\\n   * @dev Casts vote for the receipt with the receipt hash `_hash`.\\n   *\\n   * Requirements:\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function castVote(Vote storage _v, address _voter, bytes32 _hash) internal {\\n    if (_v.expiredAt > 0 && _v.expiredAt <= block.timestamp) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Expired;\\n    }\\n\\n    if (voted(_v, _voter)) revert ErrAlreadyVoted(_voter);\\n\\n    _v.voteHashOf[_voter] = _hash;\\n    _v.voters.push(_voter);\\n  }\\n\\n  /**\\n   * @dev Updates vote with the requirement of minimum vote weight.\\n   */\\n  function syncVoteStatus(\\n    Vote storage _v,\\n    uint256 _minimumVoteWeight,\\n    uint256 _votedWeightForHash,\\n    bytes32 _hash\\n  ) internal returns (VoteStatusConsumer.VoteStatus _status) {\\n    if (_votedWeightForHash >= _minimumVoteWeight && _v.status == VoteStatusConsumer.VoteStatus.Pending) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Approved;\\n      _v.finalHash = _hash;\\n    }\\n\\n    return _v.status;\\n  }\\n\\n  /**\\n   * @dev Returns the list of vote's addresses that voted for the hash `_hash`.\\n   */\\n  function filterByHash(Vote storage _v, bytes32 _hash) internal view returns (address[] memory _voters) {\\n    uint256 _count;\\n    _voters = new address[](_v.voters.length);\\n\\n    unchecked {\\n      for (uint _i; _i < _voters.length; ++_i) {\\n        address _voter = _v.voters[_i];\\n        if (_v.voteHashOf[_voter] == _hash) {\\n          _voters[_count++] = _voter;\\n        }\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_voters, _count)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function voted(Vote storage _v, address _voter) internal view returns (bool) {\\n    return _v.voteHashOf[_voter] != bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0xa6a1e04b914580c099ac87f65ec24c35445eee34809e3decf1c57b6c52942d36\",\"license\":\"MIT\"},\"src/libraries/LibTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nenum TokenStandard {\\n  ERC20,\\n  ERC721,\\n  ERC1155\\n}\\n\\nstruct TokenInfo {\\n  TokenStandard erc;\\n  // For ERC20:  the id must be 0 and the quantity is larger than 0.\\n  // For ERC721: the quantity must be 0.\\n  uint256 id;\\n  uint256 quantity;\\n}\\n\\n/**\\n * @dev Error indicating that the `transfer` has failed.\\n * @param tokenInfo Info of the token including ERC standard, id or quantity.\\n * @param to Receiver of the token value.\\n * @param token Address of the token.\\n */\\nerror ErrTokenCouldNotTransfer(TokenInfo tokenInfo, address to, address token);\\n\\n/**\\n * @dev Error indicating that the `handleAssetIn` has failed.\\n * @param tokenInfo Info of the token including ERC standard, id or quantity.\\n * @param from Owner of the token value.\\n * @param to Receiver of the token value.\\n * @param token Address of the token.\\n */\\nerror ErrTokenCouldNotTransferFrom(TokenInfo tokenInfo, address from, address to, address token);\\n\\n/// @dev Error indicating that the provided information is invalid.\\nerror ErrInvalidInfo();\\n\\n/// @dev Error indicating that the minting of ERC20 tokens has failed.\\nerror ErrERC20MintingFailed();\\n\\n/// @dev Error indicating that the minting of ERC721 tokens has failed.\\nerror ErrERC721MintingFailed();\\n\\n/// @dev Error indicating that the transfer of ERC1155 tokens has failed.\\nerror ErrERC1155TransferFailed();\\n\\n/// @dev Error indicating that the mint of ERC1155 tokens has failed.\\nerror ErrERC1155MintingFailed();\\n\\n/// @dev Error indicating that an unsupported standard is encountered.\\nerror ErrUnsupportedStandard();\\n\\nlibrary LibTokenInfo {\\n  /**\\n   *\\n   *        HASH\\n   *\\n   */\\n\\n  // keccak256(\\\"TokenInfo(uint8 erc,uint256 id,uint256 quantity)\\\");\\n  bytes32 public constant INFO_TYPE_HASH_SINGLE = 0x1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d;\\n\\n  /**\\n   * @dev Returns token info struct hash.\\n   */\\n  function hash(TokenInfo memory self) internal pure returns (bytes32 digest) {\\n    // keccak256(abi.encode(INFO_TYPE_HASH_SINGLE, info.erc, info.id, info.quantity))\\n    assembly (\\\"memory-safe\\\") {\\n      let ptr := mload(0x40)\\n      mstore(ptr, INFO_TYPE_HASH_SINGLE)\\n      mstore(add(ptr, 0x20), mload(self)) // info.erc\\n      mstore(add(ptr, 0x40), mload(add(self, 0x20))) // info.id\\n      mstore(add(ptr, 0x60), mload(add(self, 0x40))) // info.quantity\\n      digest := keccak256(ptr, 0x80)\\n    }\\n  }\\n\\n  /**\\n   *\\n   *         VALIDATE\\n   *\\n   */\\n\\n  /**\\n   * @dev Validates the token info.\\n   */\\n  function validate(TokenInfo memory self) internal pure {\\n    if (!(_checkERC20(self) || _checkERC721(self) || _checkERC1155(self))) {\\n      revert ErrInvalidInfo();\\n    }\\n  }\\n\\n  function _checkERC20(TokenInfo memory self) private pure returns (bool) {\\n    return (self.erc == TokenStandard.ERC20 && self.quantity > 0 && self.id == 0);\\n  }\\n\\n  function _checkERC721(TokenInfo memory self) private pure returns (bool) {\\n    return (self.erc == TokenStandard.ERC721 && self.quantity == 0);\\n  }\\n\\n  function _checkERC1155(TokenInfo memory self) private pure returns (bool res) {\\n    // Only validate the quantity, because id of ERC-1155 can be 0.\\n    return (self.erc == TokenStandard.ERC1155 && self.quantity > 0);\\n  }\\n\\n  /**\\n   *\\n   *       TRANSFER IN/OUT METHOD\\n   *\\n   */\\n\\n  /**\\n   * @dev Transfer asset in.\\n   *\\n   * Requirements:\\n   * - The `_from` address must approve for the contract using this library.\\n   *\\n   */\\n  function handleAssetIn(TokenInfo memory self, address from, address token) internal {\\n    bool success;\\n    bytes memory data;\\n    if (self.erc == TokenStandard.ERC20) {\\n      (success, data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, address(this), self.quantity));\\n      success = success && (data.length == 0 || abi.decode(data, (bool)));\\n    } else if (self.erc == TokenStandard.ERC721) {\\n      success = _tryTransferFromERC721(token, from, address(this), self.id);\\n    } else if (self.erc == TokenStandard.ERC1155) {\\n      success = _tryTransferFromERC1155(token, from, address(this), self.id, self.quantity);\\n    } else {\\n      revert ErrUnsupportedStandard();\\n    }\\n\\n    if (!success) revert ErrTokenCouldNotTransferFrom(self, from, address(this), token);\\n  }\\n\\n  /**\\n   * @dev Tries transfer assets out, or mint the assets if cannot transfer.\\n   *\\n   * @notice Prioritizes transfer native token if the token is wrapped.\\n   *\\n   */\\n  function handleAssetOut(TokenInfo memory self, address payable to, address token, IWETH wrappedNativeToken) internal {\\n    if (token == address(wrappedNativeToken)) {\\n      // Try sending the native token before transferring the wrapped token\\n      if (!to.send(self.quantity)) {\\n        wrappedNativeToken.deposit{ value: self.quantity }();\\n        _transferTokenOut(self, to, token);\\n      }\\n\\n      return;\\n    }\\n\\n    if (self.erc == TokenStandard.ERC20) {\\n      uint256 balance = IERC20(token).balanceOf(address(this));\\n      if (balance < self.quantity) {\\n        if (!_tryMintERC20(token, address(this), self.quantity - balance)) revert ErrERC20MintingFailed();\\n      }\\n\\n      _transferTokenOut(self, to, token);\\n      return;\\n    }\\n\\n    if (self.erc == TokenStandard.ERC721) {\\n      if (!_tryTransferOutOrMintERC721(token, to, self.id)) {\\n        revert ErrERC721MintingFailed();\\n      }\\n      return;\\n    }\\n\\n    if (self.erc == TokenStandard.ERC1155) {\\n      if (!_tryTransferOutOrMintERC1155(token, to, self.id, self.quantity)) {\\n        revert ErrERC1155MintingFailed();\\n      }\\n      return;\\n    }\\n\\n    revert ErrUnsupportedStandard();\\n  }\\n\\n  /**\\n   *\\n   *      TRANSFER HELPERS\\n   *\\n   */\\n\\n  /**\\n   * @dev Transfer assets from current address to `_to` address.\\n   */\\n  function _transferTokenOut(TokenInfo memory self, address to, address token) private {\\n    bool success;\\n    if (self.erc == TokenStandard.ERC20) {\\n      success = _tryTransferERC20(token, to, self.quantity);\\n    } else if (self.erc == TokenStandard.ERC721) {\\n      success = _tryTransferFromERC721(token, address(this), to, self.id);\\n    } else {\\n      revert ErrUnsupportedStandard();\\n    }\\n\\n    if (!success) revert ErrTokenCouldNotTransfer(self, to, token);\\n  }\\n\\n  /**\\n   *      TRANSFER ERC-20\\n   */\\n\\n  /**\\n   * @dev Transfers ERC20 token and returns the result.\\n   */\\n  function _tryTransferERC20(address token, address to, uint256 quantity) private returns (bool success) {\\n    bytes memory data;\\n    (success, data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, quantity));\\n    success = success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n\\n  /**\\n   * @dev Mints ERC20 token and returns the result.\\n   */\\n  function _tryMintERC20(address token, address to, uint256 quantity) private returns (bool success) {\\n    // bytes4(keccak256(\\\"mint(address,uint256)\\\"))\\n    (success,) = token.call(abi.encodeWithSelector(0x40c10f19, to, quantity));\\n  }\\n\\n  /**\\n   *      TRANSFER ERC-721\\n   */\\n\\n  /**\\n   * @dev Transfers the ERC721 token out. If the transfer failed, mints the ERC721.\\n   * @return success Returns `false` if both transfer and mint are failed.\\n   */\\n  function _tryTransferOutOrMintERC721(address token, address to, uint256 id) private returns (bool success) {\\n    success = _tryTransferFromERC721(token, address(this), to, id);\\n    if (!success) {\\n      return _tryMintERC721(token, to, id);\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfers ERC721 token and returns the result.\\n   */\\n  function _tryTransferFromERC721(address token, address from, address to, uint256 id) private returns (bool success) {\\n    (success,) = token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, from, to, id));\\n  }\\n\\n  /**\\n   * @dev Mints ERC721 token and returns the result.\\n   */\\n  function _tryMintERC721(address token, address to, uint256 id) private returns (bool success) {\\n    // bytes4(keccak256(\\\"mint(address,uint256)\\\"))\\n    (success,) = token.call(abi.encodeWithSelector(0x40c10f19, to, id));\\n  }\\n\\n  /**\\n   *      TRANSFER ERC-1155\\n   */\\n\\n  /**\\n   * @dev Transfers the ERC1155 token out. If the transfer failed, mints the ERC11555.\\n   * @return success Returns `false` if both transfer and mint are failed.\\n   */\\n  function _tryTransferOutOrMintERC1155(address token, address to, uint256 id, uint256 amount) private returns (bool success) {\\n    success = _tryTransferFromERC1155(token, address(this), to, id, amount);\\n    if (!success) {\\n      return _tryMintERC1155(token, to, id, amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfers ERC1155 token and returns the result.\\n   */\\n  function _tryTransferFromERC1155(address token, address from, address to, uint256 id, uint256 amount) private returns (bool success) {\\n    (success,) = token.call(abi.encodeCall(IERC1155.safeTransferFrom, (from, to, id, amount, new bytes(0))));\\n  }\\n\\n  /**\\n   * @dev Mints ERC1155 token and returns the result.\\n   */\\n  function _tryMintERC1155(address token, address to, uint256 id, uint256 amount) private returns (bool success) {\\n    (success,) = token.call(abi.encodeCall(ERC1155PresetMinterPauser.mint, (to, id, amount, new bytes(0))));\\n  }\\n}\\n\",\"keccak256\":\"0x56b413a42c6c39a51dc1737e735d1623b89ecdf00bacd960f70b3f18ccaa6de2\",\"license\":\"MIT\"},\"src/libraries/LibTokenOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct TokenOwner {\\n  address addr;\\n  address tokenAddr;\\n  uint256 chainId;\\n}\\n\\nlibrary LibTokenOwner {\\n  // keccak256(\\\"TokenOwner(address addr,address tokenAddr,uint256 chainId)\\\");\\n  bytes32 public constant OWNER_TYPE_HASH = 0x353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e8764;\\n\\n  /**\\n   * @dev Returns ownership struct hash.\\n   */\\n  function hash(TokenOwner memory owner) internal pure returns (bytes32 digest) {\\n    // keccak256(abi.encode(OWNER_TYPE_HASH, owner.addr, owner.tokenAddr, owner.chainId))\\n    assembly (\\\"memory-safe\\\") {\\n      let ptr := mload(0x40)\\n      mstore(ptr, OWNER_TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(owner)) // owner.addr\\n      mstore(add(ptr, 0x40), mload(add(owner, 0x20))) // owner.tokenAddr\\n      mstore(add(ptr, 0x60), mload(add(owner, 0x40))) // owner.chainId\\n      digest := keccak256(ptr, 0x80)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb104fd02056a3ed52bf06c202e87b748200320682871b1801985050587ec2d51\",\"license\":\"MIT\"},\"src/libraries/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./LibTokenInfo.sol\\\";\\nimport \\\"./LibTokenOwner.sol\\\";\\n\\nlibrary Transfer {\\n  using ECDSA for bytes32;\\n  using LibTokenOwner for TokenOwner;\\n  using LibTokenInfo for TokenInfo;\\n\\n  enum Kind {\\n    Deposit,\\n    Withdrawal\\n  }\\n\\n  struct Request {\\n    // For deposit request: Recipient address on Ronin network\\n    // For withdrawal request: Recipient address on mainchain network\\n    address recipientAddr;\\n    // Token address to deposit/withdraw\\n    // Value 0: native token\\n    address tokenAddr;\\n    TokenInfo info;\\n  }\\n\\n  /**\\n   * @dev Converts the transfer request into the deposit receipt.\\n   */\\n  function into_deposit_receipt(\\n    Request memory _request,\\n    address _requester,\\n    uint256 _id,\\n    address _roninTokenAddr,\\n    uint256 _roninChainId\\n  ) internal view returns (Receipt memory _receipt) {\\n    _receipt.id = _id;\\n    _receipt.kind = Kind.Deposit;\\n    _receipt.mainchain.addr = _requester;\\n    _receipt.mainchain.tokenAddr = _request.tokenAddr;\\n    _receipt.mainchain.chainId = block.chainid;\\n    _receipt.ronin.addr = _request.recipientAddr;\\n    _receipt.ronin.tokenAddr = _roninTokenAddr;\\n    _receipt.ronin.chainId = _roninChainId;\\n    _receipt.info = _request.info;\\n  }\\n\\n  /**\\n   * @dev Converts the transfer request into the withdrawal receipt.\\n   */\\n  function into_withdrawal_receipt(\\n    Request memory _request,\\n    address _requester,\\n    uint256 _id,\\n    address _mainchainTokenAddr,\\n    uint256 _mainchainId\\n  ) internal view returns (Receipt memory _receipt) {\\n    _receipt.id = _id;\\n    _receipt.kind = Kind.Withdrawal;\\n    _receipt.ronin.addr = _requester;\\n    _receipt.ronin.tokenAddr = _request.tokenAddr;\\n    _receipt.ronin.chainId = block.chainid;\\n    _receipt.mainchain.addr = _request.recipientAddr;\\n    _receipt.mainchain.tokenAddr = _mainchainTokenAddr;\\n    _receipt.mainchain.chainId = _mainchainId;\\n    _receipt.info = _request.info;\\n  }\\n\\n  struct Receipt {\\n    uint256 id;\\n    Kind kind;\\n    TokenOwner mainchain;\\n    TokenOwner ronin;\\n    TokenInfo info;\\n  }\\n\\n  // keccak256(\\\"Receipt(uint256 id,uint8 kind,TokenOwner mainchain,TokenOwner ronin,TokenInfo info)TokenInfo(uint8 erc,uint256 id,uint256 quantity)TokenOwner(address addr,address tokenAddr,uint256 chainId)\\\");\\n  bytes32 public constant TYPE_HASH = 0xb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea;\\n\\n  /**\\n   * @dev Returns token info struct hash.\\n   */\\n  function hash(Receipt memory _receipt) internal pure returns (bytes32 digest) {\\n    bytes32 hashedReceiptMainchain = _receipt.mainchain.hash();\\n    bytes32 hashedReceiptRonin = _receipt.ronin.hash();\\n    bytes32 hashedReceiptInfo = _receipt.info.hash();\\n\\n    /*\\n     * return\\n     *   keccak256(\\n     *     abi.encode(\\n     *       TYPE_HASH,\\n     *       _receipt.id,\\n     *       _receipt.kind,\\n     *       Token.hash(_receipt.mainchain),\\n     *       Token.hash(_receipt.ronin),\\n     *       Token.hash(_receipt.info)\\n     *     )\\n     *   );\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_receipt)) // _receipt.id\\n      mstore(add(ptr, 0x40), mload(add(_receipt, 0x20))) // _receipt.kind\\n      mstore(add(ptr, 0x60), hashedReceiptMainchain)\\n      mstore(add(ptr, 0x80), hashedReceiptRonin)\\n      mstore(add(ptr, 0xa0), hashedReceiptInfo)\\n      digest := keccak256(ptr, 0xc0)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the receipt digest.\\n   */\\n  function receiptDigest(bytes32 _domainSeparator, bytes32 _receiptHash) internal pure returns (bytes32) {\\n    return _domainSeparator.toTypedDataHash(_receiptHash);\\n  }\\n}\\n\",\"keccak256\":\"0x652c72f4e9aeffed1be05759c84c538a416d2c264deef9af4c53de0a1ad04ee4\",\"license\":\"MIT\"},\"src/ronin/gateway/RoninGatewayV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"../../extensions/GatewayV3.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../extensions/MinimumWithdrawal.sol\\\";\\nimport \\\"../../interfaces/IERC20Mintable.sol\\\";\\nimport \\\"../../interfaces/IERC721Mintable.sol\\\";\\nimport \\\"../../interfaces/bridge/IBridgeTracking.sol\\\";\\nimport \\\"../../interfaces/IRoninGatewayV3.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../libraries/IsolatedGovernance.sol\\\";\\nimport \\\"../../interfaces/bridge/IBridgeManager.sol\\\";\\n\\ncontract RoninGatewayV3 is\\n  GatewayV3,\\n  Initializable,\\n  MinimumWithdrawal,\\n  AccessControlEnumerable,\\n  ERC1155Holder,\\n  VoteStatusConsumer,\\n  IRoninGatewayV3,\\n  HasContracts\\n{\\n  using LibTokenInfo for TokenInfo;\\n  using Transfer for Transfer.Request;\\n  using Transfer for Transfer.Receipt;\\n  using IsolatedGovernance for IsolatedGovernance.Vote;\\n\\n  /// @custom:deprecated Previously `withdrawalMigrated` (non-zero value)\\n  bool private ___deprecated4;\\n  /// @dev Total withdrawal\\n  uint256 public withdrawalCount;\\n  /// @dev Mapping from chain id => deposit id => deposit vote\\n  mapping(uint256 => mapping(uint256 => IsolatedGovernance.Vote)) public depositVote;\\n  /// @dev Mapping from withdrawal id => mainchain withdrew vote\\n  mapping(uint256 => IsolatedGovernance.Vote) public mainchainWithdrewVote;\\n  /// @dev Mapping from withdrawal id => withdrawal receipt\\n  mapping(uint256 => Transfer.Receipt) public withdrawal;\\n  /// @dev Mapping from withdrawal id => validator address => signatures\\n  mapping(uint256 => mapping(address => bytes)) internal _withdrawalSig;\\n  /// @dev Mapping from token address => chain id => mainchain token address\\n  mapping(address => mapping(uint256 => MappedToken)) internal _mainchainToken;\\n\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address private ____deprecated0;\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address private ____deprecated1;\\n\\n  /// @dev Mapping from withdrawal id => vote for recording withdrawal stats\\n  mapping(uint256 => IsolatedGovernance.Vote) public withdrawalStatVote;\\n\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address private ____deprecated2;\\n\\n  uint256 internal _trustedNum;\\n  uint256 internal _trustedDenom;\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  modifier onlyBridgeOperator() {\\n    _requireBridgeOperator();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the method caller is not bridge operator.\\n   */\\n  function _requireBridgeOperator() internal view {\\n    if (!IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)).isBridgeOperator(msg.sender)) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.__DEPRECATED_BRIDGE_OPERATOR);\\n    }\\n  }\\n\\n  /**\\n   * @dev Initializes contract storage.\\n   */\\n  function initialize(\\n    address _roleSetter,\\n    uint256 _numerator,\\n    uint256 _denominator,\\n    uint256 _trustedNumerator,\\n    uint256 _trustedDenominator,\\n    address[] calldata, /* _withdrawalMigrators */\\n    // _packedAddresses[0]: roninTokens\\n    // _packedAddresses[1]: mainchainTokens\\n    address[][2] calldata _packedAddresses,\\n    // _packedNumbers[0]: chainIds\\n    // _packedNumbers[1]: minimumThresholds\\n    uint256[][2] calldata _packedNumbers,\\n    TokenStandard[] calldata _standards\\n  ) external virtual initializer {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roleSetter);\\n    _setThreshold(_numerator, _denominator);\\n    _setTrustedThreshold(_trustedNumerator, _trustedDenominator);\\n    if (_packedAddresses[0].length > 0) {\\n      _mapTokens(_packedAddresses[0], _packedAddresses[1], _packedNumbers[0], _standards);\\n      _setMinimumThresholds(_packedAddresses[0], _packedNumbers[1]);\\n    }\\n  }\\n\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ____deprecated0);\\n    _setContract(ContractType.BRIDGE_TRACKING, ____deprecated1);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, ____deprecated2);\\n    delete ____deprecated0;\\n    delete ____deprecated1;\\n    delete ____deprecated2;\\n  }\\n\\n  function initializeV3(address bridgeAdmin) external reinitializer(3) {\\n    _setContract(ContractType.BRIDGE_MANAGER, bridgeAdmin);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function getWithdrawalSignatures(uint256 withdrawalId, address[] calldata operators) external view returns (bytes[] memory _signatures) {\\n    _signatures = new bytes[](operators.length);\\n    for (uint256 _i = 0; _i < operators.length;) {\\n      _signatures[_i] = _withdrawalSig[withdrawalId][operators[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function depositFor(Transfer.Receipt calldata _receipt) external whenNotPaused onlyBridgeOperator {\\n    _depositFor(_receipt, msg.sender, minimumVoteWeight());\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function tryBulkAcknowledgeMainchainWithdrew(uint256[] calldata _withdrawalIds) external onlyBridgeOperator returns (bool[] memory _executedReceipts) {\\n    address governor = msg.sender;\\n    uint256 minVoteWeight = minimumVoteWeight();\\n\\n    uint256 withdrawalId;\\n    uint length = _withdrawalIds.length;\\n\\n    _executedReceipts = new bool[](length);\\n    IBridgeTracking bridgeTrackingContract = IBridgeTracking(getContract(ContractType.BRIDGE_TRACKING));\\n\\n    for (uint256 i; i < length; ++i) {\\n      withdrawalId = _withdrawalIds[i];\\n      bridgeTrackingContract.recordVote(IBridgeTracking.VoteKind.MainchainWithdrawal, withdrawalId, governor);\\n\\n      // Mark the withdrawal is executed\\n      if (mainchainWithdrew(withdrawalId)) {\\n        _executedReceipts[i] = true;\\n      }\\n\\n      // Process all votes, not early-exit to track all votes in BridgeTracking\\n      IsolatedGovernance.Vote storage _vote = mainchainWithdrewVote[withdrawalId];\\n      Transfer.Receipt memory _withdrawal = withdrawal[withdrawalId];\\n      bytes32 _hash = _withdrawal.hash();\\n      VoteStatus _status = _castIsolatedVote(_vote, governor, minVoteWeight, _hash);\\n      if (_status == VoteStatus.Approved) {\\n        _vote.status = VoteStatus.Executed;\\n        bridgeTrackingContract.handleVoteApproved(IBridgeTracking.VoteKind.MainchainWithdrawal, withdrawalId);\\n        emit MainchainWithdrew(_hash, _withdrawal);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function tryBulkDepositFor(Transfer.Receipt[] calldata receipts) external whenNotPaused onlyBridgeOperator returns (bool[] memory _executedReceipts) {\\n    uint length = receipts.length;\\n    _executedReceipts = new bool[](length);\\n    uint256 minVoteWeight = minimumVoteWeight();\\n\\n    Transfer.Receipt memory iReceipt;\\n    for (uint i; i < length; ++i) {\\n      iReceipt = receipts[i];\\n      if (depositVote[iReceipt.mainchain.chainId][iReceipt.id].status == VoteStatus.Executed) {\\n        _executedReceipts[i] = true;\\n      }\\n\\n      // Process all votes, not early-exit to track all votes in BridgeTracking\\n      _depositFor(iReceipt, msg.sender, minVoteWeight);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function requestWithdrawalFor(Transfer.Request calldata _request, uint256 _chainId) external whenNotPaused {\\n    _requestWithdrawalFor(_request, msg.sender, _chainId);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function bulkRequestWithdrawalFor(Transfer.Request[] calldata requests, uint256 chainId) external whenNotPaused {\\n    uint length = requests.length;\\n    if (length == 0) revert ErrEmptyArray();\\n\\n    for (uint i; i < length; ++i) {\\n      _requestWithdrawalFor(requests[i], msg.sender, chainId);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function requestWithdrawalSignatures(uint256 _withdrawalId) external whenNotPaused {\\n    if (mainchainWithdrew(_withdrawalId)) revert ErrWithdrawnOnMainchainAlready();\\n\\n    Transfer.Receipt memory _receipt = withdrawal[_withdrawalId];\\n    if (_receipt.ronin.chainId != block.chainid) {\\n      revert ErrInvalidChainId(msg.sig, _receipt.ronin.chainId, block.chainid);\\n    }\\n\\n    emit WithdrawalSignaturesRequested(_receipt.hash(), _receipt);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function bulkSubmitWithdrawalSignatures(uint256[] calldata withdrawals, bytes[] calldata signatures) external whenNotPaused onlyBridgeOperator {\\n    address operator = msg.sender;\\n\\n    uint length = withdrawals.length;\\n    if (!(length > 0 && length == signatures.length)) {\\n      revert ErrLengthMismatch(msg.sig);\\n    }\\n\\n    uint256 _minVoteWeight = minimumVoteWeight();\\n\\n    uint256 id;\\n    IBridgeTracking _bridgeTrackingContract = IBridgeTracking(getContract(ContractType.BRIDGE_TRACKING));\\n    for (uint i; i < length; ++i) {\\n      id = withdrawals[i];\\n      _withdrawalSig[id][operator] = signatures[i];\\n      _bridgeTrackingContract.recordVote(IBridgeTracking.VoteKind.Withdrawal, id, operator);\\n\\n      IsolatedGovernance.Vote storage _proposal = withdrawalStatVote[id];\\n      VoteStatus _status = _castIsolatedVote(_proposal, operator, _minVoteWeight, bytes32(id));\\n      if (_status == VoteStatus.Approved) {\\n        _proposal.status = VoteStatus.Executed;\\n        _bridgeTrackingContract.handleVoteApproved(IBridgeTracking.VoteKind.Withdrawal, id);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function mapTokens(\\n    address[] calldata _roninTokens,\\n    address[] calldata _mainchainTokens,\\n    uint256[] calldata _chainIds,\\n    TokenStandard[] calldata _standards\\n  ) external onlyProxyAdmin {\\n    if (_roninTokens.length == 0) revert ErrLengthMismatch(msg.sig);\\n    _mapTokens(_roninTokens, _mainchainTokens, _chainIds, _standards);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function depositVoted(uint256 _chainId, uint256 _depositId, address _voter) external view returns (bool) {\\n    return depositVote[_chainId][_depositId].voted(_voter);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function mainchainWithdrewVoted(uint256 _withdrawalId, address _voter) external view returns (bool) {\\n    return mainchainWithdrewVote[_withdrawalId].voted(_voter);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function mainchainWithdrew(uint256 _withdrawalId) public view returns (bool) {\\n    return mainchainWithdrewVote[_withdrawalId].status == VoteStatus.Executed;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV3\\n   */\\n  function getMainchainToken(address _roninToken, uint256 _chainId) public view returns (MappedToken memory _token) {\\n    _token = _mainchainToken[_roninToken][_chainId];\\n    if (_token.tokenAddr == address(0)) revert ErrUnsupportedToken();\\n  }\\n\\n  /**\\n   * @dev Maps Ronin tokens to mainchain networks.\\n   *\\n   * Requirement:\\n   * - The arrays have the same length.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function _mapTokens(\\n    address[] calldata _roninTokens,\\n    address[] calldata _mainchainTokens,\\n    uint256[] calldata _chainIds,\\n    TokenStandard[] calldata _standards\\n  ) internal {\\n    if (!(_roninTokens.length == _mainchainTokens.length && _roninTokens.length == _chainIds.length)) {\\n      revert ErrLengthMismatch(msg.sig);\\n    }\\n\\n    for (uint256 _i; _i < _roninTokens.length;) {\\n      _mainchainToken[_roninTokens[_i]][_chainIds[_i]].tokenAddr = _mainchainTokens[_i];\\n      _mainchainToken[_roninTokens[_i]][_chainIds[_i]].erc = _standards[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    emit TokenMapped(_roninTokens, _mainchainTokens, _chainIds, _standards);\\n  }\\n\\n  /**\\n   * @dev Deposits based on the receipt.\\n   *\\n   * Emits the `Deposited` once the assets are released.\\n   *\\n   */\\n  function _depositFor(Transfer.Receipt memory receipt, address operator, uint256 minVoteWeight) internal {\\n    uint256 id = receipt.id;\\n    receipt.info.validate();\\n    if (receipt.kind != Transfer.Kind.Deposit) revert ErrInvalidReceiptKind();\\n    if (receipt.ronin.chainId != block.chainid) revert ErrInvalidChainId(msg.sig, receipt.ronin.chainId, block.chainid);\\n\\n    MappedToken memory token = getMainchainToken(receipt.ronin.tokenAddr, receipt.mainchain.chainId);\\n\\n    if (!(token.erc == receipt.info.erc && token.tokenAddr == receipt.mainchain.tokenAddr)) {\\n      revert ErrInvalidReceipt();\\n    }\\n\\n    IsolatedGovernance.Vote storage _proposal = depositVote[receipt.mainchain.chainId][id];\\n    bytes32 _receiptHash = receipt.hash();\\n    VoteStatus status = _castIsolatedVote(_proposal, operator, minVoteWeight, _receiptHash);\\n    emit DepositVoted(operator, id, receipt.mainchain.chainId, _receiptHash);\\n\\n    // Transfer assets and handle when the vote is approved.\\n    IBridgeTracking bridgeTrackingContract = IBridgeTracking(getContract(ContractType.BRIDGE_TRACKING));\\n    if (status == VoteStatus.Approved) {\\n      _proposal.status = VoteStatus.Executed;\\n      receipt.info.handleAssetOut(payable(receipt.ronin.addr), receipt.ronin.tokenAddr, IWETH(address(0)));\\n      bridgeTrackingContract.handleVoteApproved(IBridgeTracking.VoteKind.Deposit, receipt.id);\\n      emit Deposited(_receiptHash, receipt);\\n    }\\n\\n    // Announce to BridgeTracking to record the vote, after marking the VoteStatus as Executed.\\n    bridgeTrackingContract.recordVote(IBridgeTracking.VoteKind.Deposit, receipt.id, operator);\\n  }\\n\\n  /**\\n   * @dev Locks the assets and request withdrawal.\\n   *\\n   * Requirements:\\n   * - The token info is valid.\\n   *\\n   * Emits the `WithdrawalRequested` event.\\n   *\\n   */\\n  function _requestWithdrawalFor(Transfer.Request calldata _request, address _requester, uint256 _chainId) internal {\\n    _request.info.validate();\\n    _checkWithdrawal(_request);\\n    MappedToken memory _token = getMainchainToken(_request.tokenAddr, _chainId);\\n    if (_request.info.erc != _token.erc) revert ErrInvalidTokenStandard();\\n\\n    _request.info.handleAssetIn(_requester, _request.tokenAddr);\\n    _storeAsReceipt(_request, _chainId, _requester, _token.tokenAddr);\\n  }\\n\\n  /**\\n   * @dev Stores the withdrawal request as a receipt.\\n   *\\n   * Emits the `WithdrawalRequested` event.\\n   *\\n   */\\n  function _storeAsReceipt(\\n    Transfer.Request calldata _request,\\n    uint256 _chainId,\\n    address _requester,\\n    address _mainchainTokenAddr\\n  ) internal returns (uint256 _withdrawalId) {\\n    _withdrawalId = withdrawalCount++;\\n    Transfer.Receipt memory _receipt = _request.into_withdrawal_receipt(_requester, _withdrawalId, _mainchainTokenAddr, _chainId);\\n    withdrawal[_withdrawalId] = _receipt;\\n    emit WithdrawalRequested(_receipt.hash(), _receipt);\\n  }\\n\\n  /**\\n   * @dev Don't send me RON.\\n   */\\n  function _fallback() internal virtual {\\n    revert ErrInvalidRequest();\\n  }\\n\\n  /**\\n   * @inheritdoc GatewayV3\\n   */\\n  function _getTotalWeight() internal view virtual override returns (uint256) {\\n    return IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)).getTotalWeight();\\n  }\\n\\n  /**\\n   * @dev Casts and updates the vote result.\\n   *\\n   * Requirements:\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function _castIsolatedVote(\\n    IsolatedGovernance.Vote storage _v,\\n    address _voter,\\n    uint256 _minVoteWeight,\\n    bytes32 _hash\\n  ) internal virtual returns (VoteStatus _status) {\\n    _v.castVote(_voter, _hash);\\n    uint256 _totalWeight = _getVoteWeight(_v, _hash);\\n    return _v.syncVoteStatus(_minVoteWeight, _totalWeight, _hash);\\n  }\\n\\n  /**\\n   * @dev Returns the vote weight for a specified hash.\\n   */\\n  function _getVoteWeight(IsolatedGovernance.Vote storage _v, bytes32 _hash) internal view returns (uint256 _totalWeight) {\\n    (, address[] memory bridgeOperators, uint96[] memory weights) = IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)).getFullBridgeOperatorInfos();\\n    uint256 length = bridgeOperators.length;\\n    unchecked {\\n      for (uint _i; _i < length; ++_i) {\\n        if (_v.voteHashOf[bridgeOperators[_i]] == _hash) {\\n          _totalWeight += weights[_i];\\n        }\\n      }\\n    }\\n  }\\n\\n  function setTrustedThreshold(uint256 _trustedNumerator, uint256 _trustedDenominator) external virtual onlyProxyAdmin returns (uint256, uint256) {\\n    return _setTrustedThreshold(_trustedNumerator, _trustedDenominator);\\n  }\\n\\n  /**\\n   * @dev Returns the threshold about trusted org.\\n   */\\n  function getTrustedThreshold() external view virtual returns (uint256 trustedNum_, uint256 trustedDenom_) {\\n    return (_trustedNum, _trustedDenom);\\n  }\\n\\n  /**\\n   * @dev Sets trusted threshold and returns the old one.\\n   *\\n   * Emits the `TrustedThresholdUpdated` event.\\n   *\\n   */\\n  function _setTrustedThreshold(\\n    uint256 _trustedNumerator,\\n    uint256 _trustedDenominator\\n  ) internal virtual returns (uint256 _previousTrustedNum, uint256 _previousTrustedDenom) {\\n    if (_trustedNumerator > _trustedDenominator) revert ErrInvalidTrustedThreshold();\\n\\n    _previousTrustedNum = _num;\\n    _previousTrustedDenom = _denom;\\n    _trustedNum = _trustedNumerator;\\n    _trustedDenom = _trustedDenominator;\\n    unchecked {\\n      emit TrustedThresholdUpdated(nonce++, _trustedNumerator, _trustedDenominator, _previousTrustedNum, _previousTrustedDenom);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns minimum trusted vote weight.\\n   */\\n  function _minimumTrustedVoteWeight(uint256 _totalTrustedWeight) internal view virtual returns (uint256) {\\n    return (_trustedNum * _totalTrustedWeight + _trustedDenom - 1) / _trustedDenom;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view override(AccessControlEnumerable, ERC1155Receiver) returns (bool) {\\n    return AccessControlEnumerable.supportsInterface(interfaceId) || ERC1155Receiver.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x07763d6e838ecb550b9f8276fe4e4706be18f29707e1d8124db2abdf0f6489e1\",\"license\":\"MIT\"},\"src/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\\n/**\\n * @dev Error thrown when an invalid proposal is encountered.\\n * @param actual The actual value of the proposal.\\n * @param expected The expected value of the proposal.\\n */\\nerror ErrInvalidProposal(bytes32 actual, bytes32 expected);\\n\\n/**\\n * @dev Error of proposal is not approved for executing.\\n */\\nerror ErrProposalNotApproved();\\n\\n/**\\n * @dev Error of the caller is not the specified executor.\\n */\\nerror ErrInvalidExecutor();\\n\\n/**\\n * @dev Error of the `caller` to relay is not the specified `executor`.\\n */\\nerror ErrNonExecutorCannotRelay(address executor, address caller);\\n\",\"keccak256\":\"0x0d9e2fd98f6b704273faad707ed9eadbd4c79551ee3f902bff5b29213a204679\",\"license\":\"MIT\"},\"src/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  UNKNOWN, // 0\\n  PAUSE_ENFORCER, // 1\\n  BRIDGE, // 2\\n  BRIDGE_TRACKING, // 3\\n  GOVERNANCE_ADMIN, // 4\\n  MAINTENANCE, // 5\\n  SLASH_INDICATOR, // 6\\n  STAKING_VESTING, // 7\\n  VALIDATOR, // 8\\n  STAKING, // 9\\n  RONIN_TRUSTED_ORGANIZATION, // 10\\n  BRIDGE_MANAGER, // 11\\n  BRIDGE_SLASH, // 12\\n  BRIDGE_REWARD, // 13\\n  FAST_FINALITY_TRACKING, // 14\\n  PROFILE // 15\\n\\n}\\n\",\"keccak256\":\"0xec088aa939cd885dbe84e944942d7ea674e1fff8802c1f2ae5d8e84e4578357d\",\"license\":\"MIT\"},\"src/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams)));\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x546ab4c9cdb0e7f8e650f140349225305ba1d0706dcaceeb9180c96aa765da59\",\"license\":\"MIT\"},\"src/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  UNKNOWN, // 0\\n  ADMIN, // 1\\n  COINBASE, // 2\\n  GOVERNOR, // 3\\n  CANDIDATE_ADMIN, // 4\\n  WITHDRAWAL_MIGRATOR, // 5\\n  __DEPRECATED_BRIDGE_OPERATOR, // 6\\n  BLOCK_PRODUCER, // 7\\n  VALIDATOR_CANDIDATE, // 8\\n  CONSENSUS, // 9\\n  TREASURY // 10\\n\\n}\\n\",\"keccak256\":\"0x671ff40dd874c508c4b3879a580996c7987fc018669256f47151e420a55c0e51\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 192812,
  "numDeployments": 1,
  "storageLayout": {
    "storage": [
      {
        "astId": 58352,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 103484,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_num",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 103486,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_denom",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 103488,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "______deprecated",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 103490,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 103492,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "emergencyPauser",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 103497,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "______gap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 58190,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_initialized",
        "offset": 0,
        "slot": "55",
        "type": "t_uint8"
      },
      {
        "astId": 58193,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_initializing",
        "offset": 1,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 103711,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "minimumThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 103716,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "______gap",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56841,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_roles",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)56836_storage)"
      },
      {
        "astId": 57155,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)63339_storage)"
      },
      {
        "astId": 121409,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "___deprecated4",
        "offset": 0,
        "slot": "109",
        "type": "t_bool"
      },
      {
        "astId": 121412,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "withdrawalCount",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 121420,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "depositVote",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)111952_storage))"
      },
      {
        "astId": 121426,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "mainchainWithdrewVote",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_uint256,t_struct(Vote)111952_storage)"
      },
      {
        "astId": 121432,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "withdrawal",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint256,t_struct(Receipt)114148_storage)"
      },
      {
        "astId": 121439,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_withdrawalSig",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))"
      },
      {
        "astId": 121447,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_mainchainToken",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(MappedToken)110667_storage))"
      },
      {
        "astId": 121450,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "____deprecated0",
        "offset": 0,
        "slot": "116",
        "type": "t_address"
      },
      {
        "astId": 121453,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "____deprecated1",
        "offset": 0,
        "slot": "117",
        "type": "t_address"
      },
      {
        "astId": 121459,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "withdrawalStatVote",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_uint256,t_struct(Vote)111952_storage)"
      },
      {
        "astId": 121462,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "____deprecated2",
        "offset": 0,
        "slot": "119",
        "type": "t_address"
      },
      {
        "astId": 121464,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_trustedNum",
        "offset": 0,
        "slot": "120",
        "type": "t_uint256"
      },
      {
        "astId": 121466,
        "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
        "label": "_trustedDenom",
        "offset": 0,
        "slot": "121",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32",
        "base": "t_address"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_uint256)49_storage": {
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568",
        "base": "t_uint256"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Kind)113945": {
        "encoding": "inplace",
        "label": "enum Transfer.Kind",
        "numberOfBytes": "1"
      },
      "t_enum(TokenStandard)112271": {
        "encoding": "inplace",
        "label": "enum TokenStandard",
        "numberOfBytes": "1"
      },
      "t_enum(VoteStatus)110686": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(MappedToken)110667_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct MappedTokenConsumer.MappedToken))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(MappedToken)110667_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)63339_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)63339_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)56836_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)56836_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)111952_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct IsolatedGovernance.Vote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Vote)111952_storage)"
      },
      "t_mapping(t_uint256,t_struct(MappedToken)110667_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MappedTokenConsumer.MappedToken)",
        "numberOfBytes": "32",
        "value": "t_struct(MappedToken)110667_storage"
      },
      "t_mapping(t_uint256,t_struct(Receipt)114148_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Transfer.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)114148_storage"
      },
      "t_mapping(t_uint256,t_struct(Vote)111952_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IsolatedGovernance.Vote)",
        "numberOfBytes": "32",
        "value": "t_struct(Vote)111952_storage"
      },
      "t_struct(AddressSet)63339_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 63338,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)63038_storage"
          }
        ]
      },
      "t_struct(MappedToken)110667_storage": {
        "encoding": "inplace",
        "label": "struct MappedTokenConsumer.MappedToken",
        "numberOfBytes": "32",
        "members": [
          {
            "astId": 110664,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "erc",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TokenStandard)112271"
          },
          {
            "astId": 110666,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "tokenAddr",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ]
      },
      "t_struct(Receipt)114148_storage": {
        "encoding": "inplace",
        "label": "struct Transfer.Receipt",
        "numberOfBytes": "352",
        "members": [
          {
            "astId": 114135,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 114138,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "kind",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(Kind)113945"
          },
          {
            "astId": 114141,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "mainchain",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(TokenOwner)113435_storage"
          },
          {
            "astId": 114144,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "ronin",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(TokenOwner)113435_storage"
          },
          {
            "astId": 114147,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "info",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(TokenInfo)112279_storage"
          }
        ]
      },
      "t_struct(RoleData)56836_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 56833,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56835,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)63038_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 63033,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 63037,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_struct(TokenInfo)112279_storage": {
        "encoding": "inplace",
        "label": "struct TokenInfo",
        "numberOfBytes": "96",
        "members": [
          {
            "astId": 112274,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "erc",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TokenStandard)112271"
          },
          {
            "astId": 112276,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 112278,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "quantity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ]
      },
      "t_struct(TokenOwner)113435_storage": {
        "encoding": "inplace",
        "label": "struct TokenOwner",
        "numberOfBytes": "96",
        "members": [
          {
            "astId": 113430,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 113432,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "tokenAddr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 113434,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ]
      },
      "t_struct(Vote)111952_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedGovernance.Vote",
        "numberOfBytes": "192",
        "members": [
          {
            "astId": 111934,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)110686"
          },
          {
            "astId": 111936,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "finalHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 111941,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "voteHashOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 111944,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "expiredAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 111947,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 111951,
            "contract": "src/ronin/gateway/RoninGatewayV3.sol:RoninGatewayV3",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1713251844,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "notice": "The assets will be transferred whenever the valid call passes the quorum threshold."
      },
      "tryBulkAcknowledgeMainchainWithdrew(uint256[])": {
        "notice": "Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time."
      },
      "tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])": {
        "notice": "The assets will be transferred whenever the valid call for the receipt passes the quorum threshold. Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time."
      }
    }
  }
}